webpackJsonp([13],{"0A6S":function(s,a,e){"use strict";var t={title:"[译] 小两百行 JavaScript 打造 lambda 演算解释器",description:"小两百行 JavaScript 打造lambda 演算解释器",keywords:"翻译,JavaScript",pathname:"writing-a-lambda-calculus-interpreter-in-javascript",translation:{author:"Tadeu Zagallo",social:"http://tadeuzagallo.com/blog/about/",from:"http://tadeuzagallo.com/blog/writing-a-lambda-calculus-interpreter-in-javascript/"},create_time:"2016-06-27",prev:{title:"[译] 防火墙背后的笔记：Web 设计在中国",pathname:"notes-from-behind-the-firewall-the-state-of-web-design-in-china"},next:{title:"[译] 无限滚动加载最佳实践",pathname:"infinite-scrolling-best-practices"}};a.a={head:function(){return{title:t.title,meta:[{name:"keywords",content:t.keywords||""},{name:"description",content:t.description}]}},data:function(){return{post:t,post_url:this.$config.site_url+"/post/"+t.pathname,tags:t.tags}},mounted:function(){this.$fixCode()}}},"2ozg":function(s,a,e){"use strict";var t=function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("div",{attrs:{id:"page-post"}},[e("article",{staticClass:"post detail"},[e("div",{staticClass:"meta"},[e("div",{staticClass:"date"},[s._v(s._s(s.post.create_time))])]),e("h1",{staticClass:"title"},[s._v(s._s(s.post.title))]),e("div",{staticClass:"entry-content"},[s.post.translation?e("blockquote",[e("p",{staticStyle:{"white-space":"nowrap",overflow:"hidden","text-overflow":"ellipsis"}},[s._v("\n        原文作者: "),e("a",{attrs:{href:s.post.translation.social,target:"_blank"}},[s._v(s._s(s.post.translation.author))]),e("br"),s._v("\n        原文地址: "),e("a",{attrs:{href:s.post.translation.from}},[s._v(s._s(s.post.translation.from))]),e("br"),s._v("\n        译文地址: "),e("a",{attrs:{href:s.post_url}},[s._v(s._s(s.post_url))]),e("br"),s._v("\n        本文由 "),e("a",{attrs:{href:this.$config.site_url}},[s._v(s._s(this.$config.site_owner))]),s._v(" 翻译，转载请保留此声明。"),e("br"),s._v("\n        著作权属于原作者，本译文仅用于学习、研究和交流目的，请勿用于商业目的。\n        ")])]):s._e(),s._m(0),s._m(1),e("p",[s._v("已经有许多编译器/解析器/解释器（compiler / parser / interpreter）的教程，但大多数不会引导你完整实现一种语言，因为实现完全的语言语义，通常需要很多工作。不过在本文中， lambda 演算（译者注：又写作“λ 演算”，为统一行文，下文一律作 “lambda 演算”）是如此简单，我们可以搞定一切！")]),s._m(2),s._m(3),e("p",[s._v("这是一个非常简单的 lambda 演算程序的模样：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-haskell">(%CE%BBx.%20%CE%BBy.%20x)%20(%CE%BBy.%20y)%20(%CE%BBx.%20x)</code>')]),e("p",[s._v("lambda 演算中只有两个结构，函数抽象（也就是函数声明）和应用（即函数调用），然而可以拿它做任何计算。")]),e("h2",{attrs:{id:"1-"}},[s._v("1. 语法")]),s._m(4),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">Term%20%3A%3A%3D%20Application%0A%20%20%20%20%20%20%20%20%7C%20LAMBDA%20LCID%20DOT%20Term%0A%0AApplication%20%3A%3A%3D%20Application%20Atom%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20Atom%0A%0AAtom%20%3A%3A%3D%20LPAREN%20Term%20RPAREN%0A%20%20%20%20%20%20%20%20%7C%20LCID</code>')]),e("p",[s._v("语法告诉我们如何在分析过程中寻找 token 。但是等一下，token 是什么鬼？")]),e("h2",{attrs:{id:"2-tokens"}},[s._v("2. Tokens")]),e("p",[s._v("正如你可能已经知道的，解析器不会操作源代码。在开始解析之前，先通过 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("词法分析器（lexer）")]),s._v(" 运行源码，这会将源码打散成 token（语法中全大写的部分）。我们可以从上面的语法中提取的如下的 token ：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">LPAREN%3A%20%3Cspan%20class%3D%22hljs-string%22%3E'('%3C%2Fspan%3E%0ARPAREN%3A%20%3Cspan%20class%3D%22hljs-string%22%3E')'%3C%2Fspan%3E%0ALAMBDA%3A%20%3Cspan%20class%3D%22hljs-string%22%3E'%CE%BB'%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E4%B8%BA%E4%BA%86%E6%96%B9%E4%BE%BF%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20%E2%80%9C%5C%E2%80%9D%3C%2Fspan%3E%0ADOT%3A%20%3Cspan%20class%3D%22hljs-string%22%3E'.'%3C%2Fspan%3E%0ALCID%3A%20%3Cspan%20class%3D%22hljs-regexp%22%3E%2F%5Ba-z%5D%5Ba-zA-Z%5D*%2F%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20LCID%20%E8%A1%A8%E7%A4%BA%E5%B0%8F%E5%86%99%E6%A0%87%E8%AF%86%E7%AC%A6%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E5%8D%B3%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D%E5%BC%80%E5%A4%B4%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%3C%2Fspan%3E</code>")]),e("p",[s._v("我们来建一个可以包含 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("type")]),s._v(" （以上的任意一种）的 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Token")]),s._v(" 类，以及一个可选的 value (比如 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("LCID")]),s._v(" 的字符串)。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-class%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Eclass%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-title%22%3EToken%3C%2Fspan%3E%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Econstructor%3C%2Fspan%3E(type%2C%20value)%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.type%20%3D%20type%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.value%20%3D%20value%3B%0A%20%20%7D%0A%7D%3B</code>')]),e("h2",{attrs:{id:"3-lexer-"}},[s._v("3. 词法分析器( Lexer )")]),e("p",[s._v("现在我们可以拿上面定义的 token 来写 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("词法分析器（Lexer）")]),s._v(" 了， 为解析器解析程序提供一个很棒的 "),e("em",[s._v("API")]),s._v(" 。")]),e("p",[s._v("词法分析器的 token 生成的部分不是很好玩：这是一个大的 switch 语句，用来检查源代码中的下一个字符：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">_nextToken()%20%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eswitch%3C%2Fspan%3E%20(c)%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ecase%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-string%22%3E'%CE%BB'%3C%2Fspan%3E%3A%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ecase%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-string%22%3E'%5C%5C'%3C%2Fspan%3E%3A%0A%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E._token%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20Token(Token.LAMBDA)%3B%0A%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ebreak%3C%2Fspan%3E%3B%0A%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ecase%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-string%22%3E'.'%3C%2Fspan%3E%3A%0A%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E._token%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20Token(Token.DOT)%3B%0A%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ebreak%3C%2Fspan%3E%3B%0A%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ecase%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-string%22%3E'('%3C%2Fspan%3E%3A%0A%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E._token%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20Token(Token.LPAREN)%3B%0A%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ebreak%3C%2Fspan%3E%3B%0A%0A%20%20%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F*%20...%20*%2F%3C%2Fspan%3E%0A%20%20%7D%0A%7D</code>")]),e("p",[s._v("下面这些方法是处理 token 的辅助方法：")]),e("ul",[e("li",[e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("next(Token)")]),s._v(": 返回下一个 token 是否匹配 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Token")])]),e("li",[e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("skip(Token)")]),s._v(": 和 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("next")]),s._v(" 一样, 但如果匹配的话会跳过")]),e("li",[e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("match(Token)")]),s._v(": 断言 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("next")]),s._v(" 方法返回 true 并 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("skip")])]),e("li",[e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("token(Token)")]),s._v(": 断言 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("next")]),s._v(" 方法返回 true 并返回 token")])]),e("p",[s._v("OK，现在来看 “解析器”！")]),e("h2",{attrs:{id:"4-"}},[s._v("4. 解析器")]),e("p",[s._v("解析器基本上是语法的一个副本。我们基于每个 production 规则的名称（"),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("::=")]),s._v(" 的左侧）为其创建一个方法，再来看右侧内容 —— 如果是全大写的单词，说明它是一个 "),e("em",[s._v("终止符")]),s._v(" （即一个 token ），词法分析器会用到它。如果是一个大写字母开头的单词，这是另外一段，所以同样为其调用 production 规则的方法。遇到 “/” （读作 “或”）的时候，要决定使用那一侧，这取决于基于哪一侧匹配我们的 token。")]),e("p",[s._v("这个语法有点棘手的地方是：手写的解析器通常是"),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Recursive_descent_parser",target:"_blank"}},[s._v("递归下降（recursive descent）")]),s._v("的（我们的就是），它们无法处理左侧递归。你可能已经注意到了， "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Application")]),s._v(" 的右侧开头包含 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Application")]),s._v(" 本身。所以如果我们只是遵循前面段落说到的流程，调用我们找到的所有 production，会导致无限递归。")]),e("p",[s._v("幸运的是左递归可以用一个简单的技巧移除掉：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">Application%20%3A%3A%3D%20Atom%20Application'%0A%0AApplication'%20%3A%3A%3D%20Atom%20Application'%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%CE%B5%20%20%23%20empty</code>")]),e("h3",{attrs:{id:"4-1-ast-"}},[s._v("4.1. 抽象语法树 （AST）")]),s._m(5),s._m(6),e("p",[s._v("这是一个简单的程序及其 AST:")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">(%CE%BBx.%20x)%20(%CE%BBy.%20y)%0A%0AApplication%20%7B%0A%20%20%3Cspan%20class%3D%22hljs-attr%22%3Eabstraction%3C%2Fspan%3E%3A%20Abstraction%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-attr%22%3Eparam%3C%2Fspan%3E%3A%20Identifier%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3Ename%3C%2Fspan%3E%3A%20%3Cspan%20class%3D%22hljs-string%22%3E'x'%3C%2Fspan%3E%20%7D%2C%0A%20%20%20%20%3Cspan%20class%3D%22hljs-attr%22%3Ebody%3C%2Fspan%3E%3A%20Identifier%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3Ename%3C%2Fspan%3E%3A%20%3Cspan%20class%3D%22hljs-string%22%3E'x'%3C%2Fspan%3E%20%7D%0A%20%20%7D%2C%0A%20%20%3Cspan%20class%3D%22hljs-attr%22%3Evalue%3C%2Fspan%3E%3A%20Abstraction%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-attr%22%3Eparam%3C%2Fspan%3E%3A%20Identifier%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3Ename%3C%2Fspan%3E%3A%20%3Cspan%20class%3D%22hljs-string%22%3E'y'%3C%2Fspan%3E%20%7D%2C%0A%20%20%20%20%3Cspan%20class%3D%22hljs-attr%22%3Ebody%3C%2Fspan%3E%3A%20Identifier%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3Ename%3C%2Fspan%3E%3A%20%3Cspan%20class%3D%22hljs-string%22%3E'y'%3C%2Fspan%3E%20%7D%0A%20%20%7D%0A%7D</code>")]),e("h3",{attrs:{id:"4-2-"}},[s._v("4.2. 解析器的实现")]),e("p",[s._v("现在有了我们的 AST 节点，可以拿它们来建构真正的树了。下面是基于语法中的生成规则的分析方法：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">term()%20%7B%0A%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20Term%20%3A%3A%3D%20LAMBDA%20LCID%20DOT%20Term%3C%2Fspan%3E%0A%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%20%20%20%20%20%20%20%7C%20Application%3C%2Fspan%3E%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.lexer.skip(Token.LAMBDA))%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20id%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20AST.Identifier(%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.lexer.token(Token.LCID).value)%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.lexer.match(Token.DOT)%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20term%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.term()%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20AST.Abstraction(id%2C%20term)%3B%0A%20%20%7D%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eelse%3C%2Fspan%3E%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.application()%3B%0A%20%20%7D%0A%7D%0A%0Aapplication()%20%7B%0A%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20Application%20%3A%3A%3D%20Atom%20Application'%3C%2Fspan%3E%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Elet%3C%2Fspan%3E%20lhs%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.atom()%3B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ewhile%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-literal%22%3Etrue%3C%2Fspan%3E)%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20Application'%20%3A%3A%3D%20Atom%20Application'%3C%2Fspan%3E%0A%20%20%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7C%20%CE%B5%3C%2Fspan%3E%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20rhs%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.atom()%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(!rhs)%20%7B%0A%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20lhs%3B%0A%20%20%20%20%7D%20%3Cspan%20class%3D%22hljs-keyword%22%3Eelse%3C%2Fspan%3E%20%7B%0A%20%20%20%20%20%20lhs%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20AST.Application(lhs%2C%20rhs)%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A%0Aatom()%20%7B%0A%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20Atom%20%3A%3A%3D%20LPAREN%20Term%20RPAREN%3C%2Fspan%3E%0A%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%20%20%20%20%20%20%20%7C%20LCID%3C%2Fspan%3E%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.lexer.skip(Token.LPAREN))%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20term%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.term(Token.RPAREN)%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.lexer.match(Token.RPAREN)%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20term%3B%0A%20%20%7D%20%3Cspan%20class%3D%22hljs-keyword%22%3Eelse%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.lexer.next(Token.LCID))%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20id%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20AST.Identifier(%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.lexer.token(Token.LCID).value)%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20id%3B%0A%20%20%7D%20%3Cspan%20class%3D%22hljs-keyword%22%3Eelse%3C%2Fspan%3E%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-literal%22%3Eundefined%3C%2Fspan%3E%3B%0A%20%20%7D%0A%7D</code>")]),e("h2",{attrs:{id:"5-evaluation-"}},[s._v("5. 求值（Evaluation）")]),e("p",[s._v("现在，我们可以用 AST 来给程序求值了。不过想知道我们的解释器长什么样子，还得先看看 lambda 的求值规则。")]),e("h3",{attrs:{id:"5-1-"}},[s._v("5.1. 求值规则")]),e("p",[s._v("首先，我们需要定义，什么是形式（terms）（从语法可以推断），什么是值（values）。")]),e("p",[s._v("我们的 term 是:")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">t1%20t2%20%20%20%23%20Application%0A%0A%CE%BBx.%20t1%20%20%23%20Abstraction%0A%0Ax%20%20%20%20%20%20%20%23%20Identifier</code>')]),e("p",[s._v("是的，这些几乎和我们的 AST 节点一模一样！但这其中哪些是 value？")]),e("p",[s._v("value 是最终的形式，也就是说，它们不能再被求值了。在这个例子中，唯一的既是 term 又是 value 的是 abstraction（不能对函数求值，除非它被调用）。")]),e("p",[s._v("实际的求值规则如下：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">1)%20%20%20%20%20%20%20t1%20-%26gt%3B%20t1'%0A%20%20%20%20%20_________________%0A%0A%20%20%20%20%20%20t1%20t2%20-%26gt%3B%20t1'%20t2%0A%0A2)%20%20%20%20%20%20%20t2%20-%26gt%3B%20t2'%0A%20%20%20%20%20________________%0A%0A%20%20%20%20%20%20v1%20t2%20-%26gt%3B%20v1%20t2'%0A%0A3)%20%20%20%20(%CE%BBx.%20t12)%20v2%20-%26gt%3B%20%5Bx%20-%26gt%3B%20v2%5Dt12</code>")]),e("p",[s._v("我们可以这样解读每一条规则：")]),e("ol",[e("li",[s._v("如果 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("t1")]),s._v(" 是值为 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("t1'")]),s._v(" 的项， "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("t1 t2")]),s._v(" 求值为 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("t1' t2")]),s._v("。即一个 application 的左侧先被求值。")]),e("li",[s._v("如果 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("t2")]),s._v(" 是值为 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("t2'")]),s._v(" 的项， "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("v1 t2")]),s._v(" 求值为 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("v1 t2'")]),s._v("。注意这里左侧的是 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("v1")]),s._v(" 而非 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("t1")]),s._v("， 这意味着它是 value，不能再一步被求值，也就是说，只有左侧的完成之后，才会对右侧求值。")]),e("li",[s._v("application "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("(λx. t12) v2")]),s._v(" 的结果，和 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("t12")]),s._v(" 中出现的所有 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("x")]),s._v(" 被有效替换之后是一样的。注意在对 application 求值之前，两侧必须都是 value。")])]),e("h3",{attrs:{id:"5-2-"}},[s._v("5.2. 解释器")]),e("p",[s._v("解释器遵循求值规则，将一个程序归化为 value。现在我们将上面的规则用 JavaScript 写出来：")]),e("p",[s._v("首先定义一个工具，当某个节点是 value 的时候告诉我们：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20isValue%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-params%22%3Enode%3C%2Fspan%3E%20%3D%26gt%3B%3C%2Fspan%3E%20node%20%3Cspan%20class%3D%22hljs-keyword%22%3Einstanceof%3C%2Fspan%3E%20AST.Abstraction%3B</code>')]),e("p",[s._v("好了，如果 node 是 abstraction，它就是 value；否则就不是。")]),e("p",[s._v("接下来是解释器起作用的地方：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-built_in%22%3Eeval%3C%2Fspan%3E%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E(%3Cspan%20class%3D%22hljs-params%22%3East%2C%20context%3D%7B%7D%3C%2Fspan%3E)%20%3D%26gt%3B%3C%2Fspan%3E%20%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ewhile%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-literal%22%3Etrue%3C%2Fspan%3E)%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(ast%20%3Cspan%20class%3D%22hljs-keyword%22%3Einstanceof%3C%2Fspan%3E%20AST.Application)%20%7B%0A%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(isValue(ast.lhs)%20%26amp%3B%26amp%3B%20isValue(ast.rhs))%20%7B%0A%20%20%20%20%20%20%20%20context%5Bast.lhs.param.name%5D%20%3D%20ast.rhs%3B%0A%20%20%20%20%20%20%20%20ast%20%3D%20%3Cspan%20class%3D%22hljs-built_in%22%3Eeval%3C%2Fspan%3E(ast.lhs.body%2C%20context)%3B%0A%20%20%20%20%20%20%7D%20%3Cspan%20class%3D%22hljs-keyword%22%3Eelse%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(isValue(ast.lhs))%20%7B%0A%20%20%20%20%20%20%20%20ast.rhs%20%3D%20%3Cspan%20class%3D%22hljs-built_in%22%3Eeval%3C%2Fspan%3E(ast.rhs%2C%20%3Cspan%20class%3D%22hljs-built_in%22%3EObject%3C%2Fspan%3E.assign(%7B%7D%2C%20context))%3B%0A%20%20%20%20%20%20%7D%20%3Cspan%20class%3D%22hljs-keyword%22%3Eelse%3C%2Fspan%3E%20%7B%0A%20%20%20%20%20%20%20%20ast.lhs%20%3D%20%3Cspan%20class%3D%22hljs-built_in%22%3Eeval%3C%2Fspan%3E(ast.lhs%2C%20context)%3B%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%20%3Cspan%20class%3D%22hljs-keyword%22%3Eelse%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(ast%20%3Cspan%20class%3D%22hljs-keyword%22%3Einstanceof%3C%2Fspan%3E%20AST.Identifier)%20%7B%0A%20%20%20%20%20%20%20ast%20%3D%20context%5Bast.name%5D%3B%0A%20%20%20%20%7D%20%3Cspan%20class%3D%22hljs-keyword%22%3Eelse%3C%2Fspan%3E%20%7B%0A%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20ast%3B%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%3B</code>')]),e("p",[s._v("代码有点密，但睁大眼睛好好看下，可以看到编码后的规则：")]),e("ul",[e("li",[s._v("首先检测其是否为 application，如果是，则对其求值："),e("ul",[e("li",[s._v("若 abstraction 的两侧都是值，只要将所有出现的 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("x")]),s._v(" 用给出的值替换掉； (3)")]),e("li",[s._v("否则，若左侧为值，给右侧求值；(2)")]),e("li",[s._v("如果上面都不行，只对左侧求值；(1)")])])]),e("li",[s._v("现在，如果下一个节点是 identifier，我们只需将它替换为它所表示的变量绑定的值。")]),e("li",[s._v("最后，如果没有规则适用于AST，这意味着它已经是一个 value，我们将它返回。")])]),e("p",[s._v("另外一个值得提出的是上下文（context）。上下文持有从名字到值（AST节点）的绑定，举例来说，调用一个函数时，就说你说传的参数绑定到函数需要的变量上，然后再对函数体求值。")]),e("p",[s._v("克隆上下文能保证一旦我们完成对右侧的求值，绑定的变量会从作用域出来，因为我们还持有原来的上下文。")]),e("p",[s._v("如果不克隆上下文， application 右侧引入的绑定可能泄露并可以在左侧获取到 —— 这是不应当的。考虑下面的代码：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-haskell">(%CE%BBx.%20y)%20((%CE%BBy.%20y)%20(%CE%BBx.%20x))</code>')]),e("p",[s._v("这显然是无效程序： 最左侧 abstraction 中的标识符 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("y")]),s._v("没有被绑定。来看下如果不克隆上下文，求值最后变成什么样。")]),e("p",[s._v("左侧已经是一个 value，所以对右侧求值。这是个 application，所以会将 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("(λx .x)")]),s._v(" 与 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("y")]),s._v(" 绑定，然后对 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("(λy. y)")]),s._v(" 求值，而这就是 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("y")]),s._v(" 本身。所以最后的求值就成了 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("(λx. x)")]),s._v("。")]),e("p",[s._v("到目前，我们完成了右侧，它是 value，而 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("y")]),s._v(" 超出了作用域，因为我们退出了 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("(λy. y)")]),s._v("， 如果求值的时候不克隆上下文，我们会得到一个变化过的的上下文，绑定就会泄漏，"),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("y")]),s._v(" 的值就是 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("(λx. x)")]),s._v("，最后得到错误的结果。")]),e("h2",{attrs:{id:"6-printing"}},[s._v("6. Printing")]),e("p",[s._v("OK， 现在差不多完成了：已经可以将一个程序归化为 value，我们要做的就是想办法将这个 value 表示出来。")]),e("p",[s._v("一个简单的 办法是为每个AST节点添加 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("toString方法")]),s._v("：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-comment%22%3E%2F*%20Abstraction%20*%2F%3C%2Fspan%3E%20toString()%20%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-string%22%3E%60(%CE%BB%3Cspan%20class%3D%22hljs-subst%22%3E%24%7B%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.param.toString()%7D%3C%2Fspan%3E.%20%3Cspan%20class%3D%22hljs-subst%22%3E%24%7B%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.body.toString()%7D%3C%2Fspan%3E)%60%3C%2Fspan%3E%3B%0A%7D%0A%0A%3Cspan%20class%3D%22hljs-comment%22%3E%2F*%20Application%20*%2F%3C%2Fspan%3E%20toString()%20%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-string%22%3E%60%3Cspan%20class%3D%22hljs-subst%22%3E%24%7B%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.lhs.toString()%7D%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-subst%22%3E%24%7B%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.rhs.toString()%7D%3C%2Fspan%3E%60%3C%2Fspan%3E%3B%0A%7D%0A%0A%3Cspan%20class%3D%22hljs-comment%22%3E%2F*%20Identifier%20*%2F%3C%2Fspan%3E%20toString()%20%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.name%3B%0A%7D</code>')]),e("p",[s._v("现在我们可以在结果的根节点上调用 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("toString")]),s._v("方法，它会递归打印所有子节点， 以生成字符串表示形式。")]),e("h2",{attrs:{id:"7-"}},[s._v("7. 组合起来")]),e("p",[s._v("我们需要一个脚本，将所有这些部分连接在一起，代码看起来是这样的：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20assuming%20you%20have%20some%20source%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20source%20%3D%20%3Cspan%20class%3D%22hljs-string%22%3E'(%CE%BBx.%20%CE%BBy.%20x)%20(%CE%BBx.%20x)%20(%CE%BBy.%20y)'%3C%2Fspan%3E%3B%0A%0A%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20wire%20all%20the%20pieces%20together%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20lexer%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20Lexer(source)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20parser%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20Parser(lexer)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20ast%20%3D%20parser.parse()%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20result%20%3D%20Interpreter.eval(ast)%3B%0A%0A%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20stringify%20the%20resulting%20node%20and%20print%20it%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(result.toString())%3B</code>")]),e("h2",{attrs:{id:"-"}},[s._v("源代码")]),s._m(7),e("h4",{attrs:{id:"-"}},[s._v("完成了！")]),e("p",[s._v("感谢阅读，一如既往地欢迎你的反馈！")])])]),s.post.prev.title||s.post.next.title?e("nav",{staticClass:"pagination"},[s.post.prev.title?e("nuxt-link",{staticClass:"prev",attrs:{to:"/post/"+s.post.prev.pathname,title:s.post.prev.title}},[s._v("« "+s._s(s.post.prev.title))]):s._e(),s.post.next.title?e("nuxt-link",{staticClass:"next",attrs:{to:"/post/"+s.post.next.pathname,title:s.post.next.title}},[s._v(s._s(s.post.next.title)+" »")]):s._e()],1):s._e(),e("gitalk",{attrs:{tags:s.tags}})],1)};t._withStripped=!0;var n={render:t,staticRenderFns:[function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("最近，我发了一条"),a("a",{attrs:{href:"https://twitter.com/tadeuzagallo/status/742836038264098817",target:"_blank"}},[this._v("推特")]),this._v("，我喜欢上 lambda 演算了，它简单、强大。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("我当然听说过 lambda 演算，但直到我读了这本书 "),a("a",{attrs:{href:"https://www.cis.upenn.edu/~bcpierce/tapl",target:"_blank"}},[this._v("《类型和编程语言》（Types and Programming Languages）")]),this._v(" 我才体会到其中美妙。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("首先，什么是 lambda 演算呢？"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Lambda_calculus",target:"_blank"}},[this._v("维基百科")]),this._v("是这样描述的:")])},function(){var s=this.$createElement,a=this._self._c||s;return a("blockquote",[a("p",[this._v("lambda 演算（又写作 “λ 演算”）是表达基于功能抽象和使用变量绑定和替代的应用计算数学逻辑形式系统。这是一个通用的计算模型，可以用来模拟单带图灵机，在 20 世纪 30 年代，由数学家奥隆索·乔奇第一次引入，作为数学基础的调查的一部分。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("编写解析器之前，我们需要知道的第一件事是我们将要解析的语言的语法是什么，这是 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form",target:"_blank"}},[this._v("BNF")]),this._v("（译者注：Backus–Naur Form，巴科斯范式， 上下文无关的语法的标记技术） 表达式：")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("进行分析时，需要以存储分析出的信息，为此要建立 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Abstract_syntax_tree",target:"_blank"}},[this._v("抽象语法树 ( AST )")]),this._v(" 。lambda 演算的 AST 非常简单，因为我们只有 3 种节点： Abstraction （抽象）， Application （应用）以及 Identifier （标识符）（译者注： 为方便理解，这三个单词不译）。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("em",[this._v("Abstraction")]),this._v(" 持有其参数（param） 和主体（body）； "),a("em",[this._v("Application")]),this._v(" 则持有语句的左右侧； "),a("em",[this._v("Identifier")]),this._v(" 是一个叶节点，只有持有该标识符本身的字符串表示形式。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("完整实现可以在 Github 上找到： "),a("a",{attrs:{href:"https://github.com/tadeuzagallo/lc-js",target:"_blank"}},[this._v("github.com/tadeuzagallo/lc-js")])])}]};a.a=n},zHmb:function(s,a,e){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var t=e("0A6S"),n=e("2ozg"),i=e("VU/8")(t.a,n.a,!1,null,null,null);i.options.__file="pages/post/writing-a-lambda-calculus-interpreter-in-javascript.vue",a.default=i.exports}});
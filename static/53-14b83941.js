webpackJsonp([53],{E745:function(s,a,e){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var t=e("pUSv"),r=e("UsxA"),n=e("VU/8")(t.a,r.a,!1,null,null,null);n.options.__file="pages/post/javascript-array-evolution-performance.vue",a.default=n.exports},UsxA:function(s,a,e){"use strict";var t=function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("div",{attrs:{id:"page-post"}},[e("article",{staticClass:"post detail"},[e("div",{staticClass:"meta"},[e("div",{staticClass:"date"},[s._v(s._s(s.post.create_time))])]),e("h1",{staticClass:"title"},[s._v(s._s(s.post.title))]),e("div",{staticClass:"entry-content"},[s.post.translation?e("blockquote",[e("p",{staticStyle:{"white-space":"nowrap",overflow:"hidden","text-overflow":"ellipsis"}},[s._v("\n        原文作者: "),e("a",{attrs:{href:s.post.translation.social,target:"_blank"}},[s._v(s._s(s.post.translation.author))]),e("br"),s._v("\n        原文地址: "),e("a",{attrs:{href:s.post.translation.from}},[s._v(s._s(s.post.translation.from))]),e("br"),s._v("\n        译文地址: "),e("a",{attrs:{href:s.post_url}},[s._v(s._s(s.post_url))]),e("br"),s._v("\n        本文由 "),e("a",{attrs:{href:this.$config.site_url}},[s._v(s._s(this.$config.site_owner))]),s._v(" 翻译，转载请保留此声明。"),e("br"),s._v("\n        著作权属于原作者，本译文仅用于学习、研究和交流目的，请勿用于商业目的。\n        ")])]):s._e(),e("p",[s._v("正式开始前需要声明，本文并不是要讲解 JavaScript 数组基础知识，也不会涉及语法和使用案例。本文讲得更多的是内存、优化、语法差异、性能、近来的演进。")]),e("p",[s._v("在使用 JavaScript 前，我对 C、C++、C# 这些已经颇为熟悉。与许多 C/C++ 开发者一样，JavaScript 给我的第一印象并不好。")]),e("p",[e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Array")]),s._v(" 是主要原因之一。JavaScript 数组不是连续（contiguous）的，其实现类似哈希映射（hash-maps）或字典（dictionaries）。我觉得这有点像是一门 B 级语言，数组实现根本不恰当。自那以后，JavaScript 和我对它的理解都发生了变化，很多变化。")]),e("h2",{attrs:{id:"-javascript-"}},[s._v("为什么说 JavaScript 数组不是真正的数组")]),e("p",[s._v("在聊 JavaScript 之前，先讲讲 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Array")]),s._v(" 是什么。")]),e("p",[s._v("数组是一串连续的内存位置，用来保存某些值。注意重点，“连续”（"),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("continuous")]),s._v("，或 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("contiguous")]),s._v("），这很重要。")]),e("p",[e("a",{attrs:{href:"http://p0.qhimg.com/t013e8a7ea0ed65a53e.png",target:"_blank"}},[e("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t013e8a7ea0ed65a53e.png",expression:"`https://p.ssl.qhimg.com/t013e8a7ea0ed65a53e.png`"}],attrs:{alt:"数组内存示意图"}})])]),e("p",[s._v("上图展示了数组在内存中存储方式。这个数组保存了 4 个元素，每个元素 4 字节。加起来总共占用了 16 字节的内存区。")]),e("p",[s._v("假设我们声明了 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("tinyInt arr[4];")]),s._v("，分配到的内存区的地址从 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("1201")]),s._v(" 开始。一旦需要读取 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("arr[2]")]),s._v("，只需要通过数学计算拿到 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("arr[2]")]),s._v(" 的地址即可。计算 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("1201 + (2 X 4)")]),s._v("，直接从 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("1209")]),s._v(" 开始读取即可。")]),e("p",[e("a",{attrs:{href:"http://res.cloudinary.com/dqubepfgb/image/upload/v1504384650/old-array-js_o8ufwz.png",target:"_blank"}},[e("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t0108bfb507aa331fad.png",expression:"`https://p.ssl.qhimg.com/t0108bfb507aa331fad.png`"}],attrs:{alt:"javascript 链表"}})])]),e("p",[s._v("JavaScript 中的数据是哈希映射，可以使用不同的数据结构来实现，如链表。所以，如果在 JavaScript 中声明一个数组 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("var arr = new Array(4)")]),s._v("，计算机将生成类似上图的结构。如果程序需要读取 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("arr[2]")]),s._v("，则需要从 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("1201")]),s._v(" 开始遍历寻址。")]),e("p",[s._v("以上就是 JavaScript 数组与真实数组的不同之处。显而易见，数学计算比遍历链表快。就长数组而言，情况尤其如此。")]),e("h2",{attrs:{id:"javascript-"}},[s._v("JavaScript 数组的进化")]),e("p",[s._v("不知你是否记得我们对朋友入手的 256MB 内存的电脑羡慕得要死的日子？而今天，8GB 内存遍地都是。")]),e("p",[s._v("与此类似，JavaScript 这门语言也进化了不少。从 V8、SpiderMonkey 到 TC39 和与日俱增的 Web 用户，巨大的努力已经使 JavaScript 成为世界级必需品。一旦有了庞大的用户基础，性能提升自然是硬需求。")]),e("p",[s._v("实际上，现代 JavaScript 引擎是会给数组分配连续内存的 —— 如果数组是同质的（所有元素类型相同）。优秀的程序员总会保证数组同质，以便 JIT（即时编译器）能够使用 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("c")]),s._v(" 编译器式的计算方法读取元素。")]),e("p",[s._v("不过，一旦你想要在某个同质数组中插入一个其他类型的元素，JIT 将解构整个数组，并按照旧有的方式重新创建。")]),e("p",[s._v("因此，如果你的代码写得不太糟，JavaScript "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Array")]),s._v(" 对象在幕后依然保持着真正的数组形式，这对现代 JS 开发者来说极为重要。")]),e("p",[s._v("此外，数组跟随 ES2015/ES6 有了更多的演进。TC39 决定引入类型化数组（Typed Arrays），于是我们就有了 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("ArrayBuffer")]),s._v("。")]),e("p",[e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("ArrayBuffer")]),s._v("  提供一块连续内存供我们随意操作。然而，直接操作内存还是太复杂、偏底层。于是便有了处理 ArrayBuffer 的视图（View）。目前已有一些可用视图，未来还会有更多加入。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20buffer%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-built_in%22%3EArrayBuffer%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-number%22%3E8%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20view%20%20%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-built_in%22%3EInt32Array%3C%2Fspan%3E(buffer)%3B%0Aview%5B%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%5D%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E100%3C%2Fspan%3E%3B</code>')]),s._m(0),s._m(1),e("p",[s._v("从简单的哈希映射到现在的 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("SharedArrayBuffer")]),s._v("，这相当棒吧？")]),e("h2",{attrs:{id:"-vs-"}},[s._v("旧式数组 vs 类型化数组：性能")]),e("p",[s._v("前面已经讨论了 JavaScript 数组的演进，现在来测试现代数组到底能给我们带来多大收益。下面是我在 Mac 上使用 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Node.js 8.4.0")]),s._v(" 进行的一些微型测试结果。")]),e("h3",{attrs:{id:"-"}},[s._v("旧式数组：插入")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20LIMIT%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E10000000%3C%2Fspan%3E%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20arr%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-built_in%22%3EArray%3C%2Fspan%3E(LIMIT)%3B%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.time(%3Cspan%20class%3D%22hljs-string%22%3E%22Array%20insertion%20time%22%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Efor%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20i%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20i%20%26lt%3B%20LIMIT%3B%20i%2B%2B)%20%7B%0Aarr%5Bi%5D%20%3D%20i%3B%0A%7D%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.timeEnd(%3Cspan%20class%3D%22hljs-string%22%3E%22Array%20insertion%20time%22%3C%2Fspan%3E)%3B</code>')]),s._m(2),e("h3",{attrs:{id:"typed-array-"}},[s._v("Typed Array：插入")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20LIMIT%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E10000000%3C%2Fspan%3E%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20buffer%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-built_in%22%3EArrayBuffer%3C%2Fspan%3E(LIMIT%20*%20%3Cspan%20class%3D%22hljs-number%22%3E4%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20arr%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-built_in%22%3EInt32Array%3C%2Fspan%3E(buffer)%3B%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.time(%3Cspan%20class%3D%22hljs-string%22%3E%22ArrayBuffer%20insertion%20time%22%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Efor%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20i%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20i%20%26lt%3B%20LIMIT%3B%20i%2B%2B)%20%7B%0Aarr%5Bi%5D%20%3D%20i%3B%0A%7D%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.timeEnd(%3Cspan%20class%3D%22hljs-string%22%3E%22ArrayBuffer%20insertion%20time%22%3C%2Fspan%3E)%3B</code>')]),s._m(3),e("p",[s._v("擦，我看到了什么？旧式数组和 ArrayBuffer 的性能不相上下？不不不。请记住，前面提到过，现代编译器已经智能化，能够将元素类型相同的传统数组在内部转换成内存连续的数组。第一个例子正是如此。尽管使用了 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("new Array(LIMIT)")]),s._v("，数组实际依然以现代数组形式存在。")]),e("p",[s._v("接着修改第一例子，将数组改成异构型（元素类型不完全一致）的，来看看是否存在性能差异。")]),e("h3",{attrs:{id:"-"}},[s._v("旧式数组：插入（异构）")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20LIMIT%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E10000000%3C%2Fspan%3E%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20arr%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-built_in%22%3EArray%3C%2Fspan%3E(LIMIT)%3B%0Aarr.push(%7B%3Cspan%20class%3D%22hljs-attr%22%3Ea%3C%2Fspan%3E%3A%20%3Cspan%20class%3D%22hljs-number%22%3E22%3C%2Fspan%3E%7D)%3B%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.time(%3Cspan%20class%3D%22hljs-string%22%3E%22Array%20insertion%20time%22%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Efor%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20i%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20i%20%26lt%3B%20LIMIT%3B%20i%2B%2B)%20%7B%0Aarr%5Bi%5D%20%3D%20i%3B%0A%7D%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.timeEnd(%3Cspan%20class%3D%22hljs-string%22%3E%22Array%20insertion%20time%22%3C%2Fspan%3E)%3B</code>')]),s._m(4),e("p",[s._v("改变发生在第 3 行，添加一条语句，将数组变为异构类型。其余代码保持不变。性能差异表现出来了，"),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("慢了 22 倍")]),s._v("。")]),e("h3",{attrs:{id:"-"}},[s._v("旧式数组：读取")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20LIMIT%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E10000000%3C%2Fspan%3E%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20arr%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-built_in%22%3EArray%3C%2Fspan%3E(LIMIT)%3B%0Aarr.push(%7B%3Cspan%20class%3D%22hljs-attr%22%3Ea%3C%2Fspan%3E%3A%20%3Cspan%20class%3D%22hljs-number%22%3E22%3C%2Fspan%3E%7D)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Efor%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20i%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20i%20%26lt%3B%20LIMIT%3B%20i%2B%2B)%20%7B%0Aarr%5Bi%5D%20%3D%20i%3B%0A%7D%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20p%3B%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.time(%3Cspan%20class%3D%22hljs-string%22%3E%22Array%20read%20time%22%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Efor%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20i%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20i%20%26lt%3B%20LIMIT%3B%20i%2B%2B)%20%7B%0A%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2Farr%5Bi%5D%20%3D%20i%3B%3C%2Fspan%3E%0Ap%20%3D%20arr%5Bi%5D%3B%0A%7D%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.timeEnd(%3Cspan%20class%3D%22hljs-string%22%3E%22Array%20read%20time%22%3C%2Fspan%3E)%3B</code>')]),s._m(5),e("h3",{attrs:{id:"typed-array-"}},[s._v("Typed Array：读取")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20LIMIT%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E10000000%3C%2Fspan%3E%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20buffer%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-built_in%22%3EArrayBuffer%3C%2Fspan%3E(LIMIT%20*%20%3Cspan%20class%3D%22hljs-number%22%3E4%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20arr%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-built_in%22%3EInt32Array%3C%2Fspan%3E(buffer)%3B%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.time(%3Cspan%20class%3D%22hljs-string%22%3E%22ArrayBuffer%20insertion%20time%22%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Efor%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20i%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20i%20%26lt%3B%20LIMIT%3B%20i%2B%2B)%20%7B%0Aarr%5Bi%5D%20%3D%20i%3B%0A%7D%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.time(%3Cspan%20class%3D%22hljs-string%22%3E%22ArrayBuffer%20read%20time%22%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Efor%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20i%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20i%20%26lt%3B%20LIMIT%3B%20i%2B%2B)%20%7B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20p%20%3D%20arr%5Bi%5D%3B%0A%7D%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.timeEnd(%3Cspan%20class%3D%22hljs-string%22%3E%22ArrayBuffer%20read%20time%22%3C%2Fspan%3E)%3B</code>')]),s._m(6),e("h2",{attrs:{id:"-"}},[s._v("结论")]),s._m(7),e("p",[s._v("JavaScript 数组的演进非常 nice。现在它们速度快、效率高、健壮，在内存分配时也足够智能。")]),e("h2",{attrs:{id:"-"}},[s._v("相关文章")]),s._m(8)])]),s.post.prev.title||s.post.next.title?e("nav",{staticClass:"pagination"},[s.post.prev.title?e("nuxt-link",{staticClass:"prev",attrs:{to:"/post/"+s.post.prev.pathname,title:s.post.prev.title}},[s._v("« "+s._s(s.post.prev.title))]):s._e(),s.post.next.title?e("nuxt-link",{staticClass:"next",attrs:{to:"/post/"+s.post.next.pathname,title:s.post.next.title}},[s._v(s._s(s.post.next.title)+" »")]):s._e()],1):s._e(),e("gitalk",{attrs:{tags:s.tags}})],1)};t._withStripped=!0;var r={render:t,staticRenderFns:[function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("了解更多关于类型化数组（Typed Arrays）的知识，请访问 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays",target:"_blank"}},[this._v("MDN 文档")]),this._v("。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("高性能、高效率的类型化数组在 WebGL 之后被引入。WebGL 工作者遇到了极大的性能问题，即如何高效处理二进制数据。另外，你也可以使用 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",target:"_blank"}},[this._v("SharedArrayBuffer")]),this._v(" 在多个 Web Worker 进程之间共享数据，以提升性能。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("strong",[this._v("用时："),a("em",[this._v("55ms")])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("strong",[this._v("用时："),a("em",[this._v("52ms")])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("strong",[this._v("用时："),a("em",[this._v("1207ms")])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("strong",[this._v("用时："),a("em",[this._v("196ms")])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("strong",[this._v("用时："),a("em",[this._v("27ms")])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("类型化数组的引入是 JavaScript 发展历程中的一大步。Int8Array，Uint8Array，Uint8ClampedArray，Int16Array，Uint16Array，Int32Array，Uint32Array，Float32Array，Float64Array，这些是类型化数组视图，使用原生字节序（与本机相同）。我们还可以使用 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",target:"_blank"}},[this._v("DataView")]),this._v(" 创建自定义视图窗口。希望未来会有更多帮助我们轻松操作 ArrayBuffer 的 DataView 库。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("ol",[a("li",[a("p",[a("a",{attrs:{href:"http://voidcanvas.com/is-javascript-really-interpreted-or-compiled-language/",target:"_blank",title:"Is JavaScript really interpreted or compiled language?"}},[this._v("Is JavaScript really interpreted or compiled language?")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://voidcanvas.com/create-filter-an-array-to-have-only-unique-elements-in-it/",target:"_blank",title:"Create / filter an array to have only unique elements in it"}},[this._v("Create / filter an array to have only unique elements in it")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://voidcanvas.com/object-entries-object-values-ecmascript2017-es8-examples/",target:"_blank",title:"Object.entries() & Object.values() in EcmaScript2017 (ES8) with examples"}},[this._v("Object.entries() & Object.values() in EcmaScript2017 (ES8) with examples")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://voidcanvas.com/import-vs-require/",target:"_blank",title:"import vs require – ESM & commonJs module differences"}},[this._v("import vs require – ESM & commonJs module differences")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://voidcanvas.com/deep-dive-ember-routers-ember-js-tutorial-part-5/",target:"_blank",title:"A deep dive into ember routers – Ember.js Tutorial part 5"}},[this._v("A deep dive into ember routers – Ember.js Tutorial part 5")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://voidcanvas.com/myths-facts-javascript/",target:"_blank",title:"Myths and Facts of JavaScript"}},[this._v("Myths and Facts of JavaScript")])])])])}]};a.a=r},pUSv:function(s,a,e){"use strict";var t={title:"[译] 深入 JavaScript 数组：进化与性能",description:"深入 JavaScript 数组：进化与性能",keywords:"翻译,JavaScript",pathname:"javascript-array-evolution-performance",translation:{author:"Paul Shan",social:"http://voidcanvas.com/author/paulshan/",from:"http://voidcanvas.com/javascript-array-evolution-performance/"},create_time:"2017-09-12",prev:{title:"[译] 极速渲染引擎 WebRender 揭秘",pathname:"firefox-webrender"},next:{title:"ArrayBuffer and TypedArray in ES2015",pathname:"es2015-arraybuffer"}};a.a={head:function(){return{title:t.title,meta:[{name:"keywords",content:t.keywords||""},{name:"description",content:t.description}]}},data:function(){return{post:t,post_url:this.$config.site_url+"/post/"+t.pathname,tags:t.tags}},mounted:function(){this.$fixCode()}}}});
webpackJsonp([62],{"7WwM":function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s("ip+O"),n=s("ih/q"),i=s("VU/8")(a.a,n.a,!1,null,null,null);i.options.__file="pages/post/functional-programming.vue",e.default=i.exports},"ih/q":function(t,e,s){"use strict";var a=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{attrs:{id:"page-post"}},[s("article",{staticClass:"post detail"},[s("div",{staticClass:"meta"},[s("div",{staticClass:"date"},[t._v(t._s(t.post.create_time))])]),s("h1",{staticClass:"title"},[t._v(t._s(t.post.title))]),s("div",{staticClass:"entry-content"},[t.post.translation?s("blockquote",[s("p",{staticStyle:{"white-space":"nowrap",overflow:"hidden","text-overflow":"ellipsis"}},[t._v("\n        原文作者: "),s("a",{attrs:{href:t.post.translation.social,target:"_blank"}},[t._v(t._s(t.post.translation.author))]),s("br"),t._v("\n        原文地址: "),s("a",{attrs:{href:t.post.translation.from}},[t._v(t._s(t.post.translation.from))]),s("br"),t._v("\n        译文地址: "),s("a",{attrs:{href:t.post_url}},[t._v(t._s(t.post_url))]),s("br"),t._v("\n        本文由 "),s("a",{attrs:{href:this.$config.site_url}},[t._v(t._s(this.$config.site_owner))]),t._v(" 翻译，转载请保留此声明。"),s("br"),t._v("\n        著作权属于原作者，本译文仅用于学习、研究和交流目的，请勿用于商业目的。\n        ")])]):t._e(),s("embeding",{attrs:{src:"https://ppt.baomitu.com/embed/d60409ef?style=dark"}})],1)]),t.post.prev.title||t.post.next.title?s("nav",{staticClass:"pagination"},[t.post.prev.title?s("nuxt-link",{staticClass:"prev",attrs:{to:"/post/"+t.post.prev.pathname,title:t.post.prev.title}},[t._v("« "+t._s(t.post.prev.title))]):t._e(),t.post.next.title?s("nuxt-link",{staticClass:"next",attrs:{to:"/post/"+t.post.next.pathname,title:t.post.next.title}},[t._v(t._s(t.post.next.title)+" »")]):t._e()],1):t._e(),s("gitalk",{attrs:{tags:t.tags}})],1)};a._withStripped=!0;var n={render:a,staticRenderFns:[]};e.a=n},"ip+O":function(t,e,s){"use strict";var a={title:"函数响应式编程 —— RxJS 简介",description:"函数响应式编程 —— RxJS 简介",keywords:"原创,函数响应式编程,RxJS",pathname:"functional-programming",translation:null,create_time:"2017-07-18",prev:{title:"[译] 事件代理：模式 or 反模式？",pathname:"event-delegation-pattern-or-anti-pattern"},next:{title:"ES2015 Reflection API",pathname:"es2015-reflect"}};e.a={head:function(){return{title:a.title,meta:[{name:"keywords",content:a.keywords||""},{name:"description",content:a.description}]}},data:function(){return{post:a,post_url:this.$config.site_url+"/post/"+a.pathname,tags:a.tags}},mounted:function(){this.$fixCode()}}}});
webpackJsonp([77],{L8M9:function(s,a,e){"use strict";var t=function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("div",{attrs:{id:"page-post"}},[e("article",{staticClass:"post detail"},[e("div",{staticClass:"meta"},[e("div",{staticClass:"date"},[s._v(s._s(s.post.create_time))])]),e("h1",{staticClass:"title"},[s._v(s._s(s.post.title))]),e("div",{staticClass:"entry-content"},[s.post.translation?e("blockquote",[e("p",{staticStyle:{"white-space":"nowrap",overflow:"hidden","text-overflow":"ellipsis"}},[s._v("\n        原文作者: "),e("a",{attrs:{href:s.post.translation.social,target:"_blank"}},[s._v(s._s(s.post.translation.author))]),e("br"),s._v("\n        原文地址: "),e("a",{attrs:{href:s.post.translation.from}},[s._v(s._s(s.post.translation.from))]),e("br"),s._v("\n        译文地址: "),e("a",{attrs:{href:s.post_url}},[s._v(s._s(s.post_url))]),e("br"),s._v("\n        本文由 "),e("a",{attrs:{href:this.$config.site_url}},[s._v(s._s(this.$config.site_owner))]),s._v(" 翻译，转载请保留此声明。"),e("br"),s._v("\n        著作权属于原作者，本译文仅用于学习、研究和交流目的，请勿用于商业目的。\n        ")])]):s._e(),e("h2",{attrs:{id:"-"}},[s._v("介绍")]),s._m(0),e("p",[s._v("这些 API 有着类似的作用范围和规则。因此，在去看细节之前，我们先了解他们的共同之处吧。")]),e("h2",{attrs:{id:"-"}},[s._v("共同特点")]),e("h3",{attrs:{id:"-"}},[s._v("基于客户端的存储")]),e("p",[s._v("实际上，“客户端时间存储”的意思是，数据传给了浏览器的存储 API，它将数据存在本地设备中的一块区域，该区域同样也是它存储其他用户特定信息如个人偏好、缓存的地方。除了存储数据，这些 API 可以用来检索数据，且在某些情况下还能执行搜索和批处理操作。")]),e("h3",{attrs:{id:"-"}},[s._v("置于沙盒中的")]),s._m(1),e("h3",{attrs:{id:"-quotas-"}},[s._v("空间限制（Quotas）")]),s._m(2),e("p",[s._v("有些情况下，用户也能先看到有多少存储将被使用，例如，当用户在 Chrome 应用商店中安装一个应用时，他们将被提示预先接受其权限，其中包括存储限制。（而该应用的）manifest 中的可能有个值是 “unlimited_storage” （无限制存储）。")]),e("h3",{attrs:{id:"-transactions-"}},[s._v("数据库处理（Transactions）")]),e("p",[s._v("两个 “数据库” 的存储格式支持数据处理。目的和通常的关系型数据库使用数据处理是一样的：保证数据库完整。数据库处理（Transactions）防止 “竞争条件”（race conditions） —— 这种情况是：当两个操作序列在同一时间被应用到数据库中， 导致操作结果都无法被预测，而数据库也处于可疑的准确性（dubious accuracy）状态。")]),e("h3",{attrs:{id:"-synchronous-and-asynchronous-modes-"}},[s._v("同步和异步模式（Synchronous and Asynchronous Modes）")]),e("p",[s._v("多数存储格式都支持同步和异步模式。同步模式是阻塞的，意味着下一行 js 代码执行之前，存储操作会被完整执行。异步模式会使得后面的 js 代码在数据库操作完成之前执行。存储操作会背景环境中执行，当操作完成的时候，应用会以回调函数被调用这种形式接收通知，这个函数须在调用的时候被指定。")]),e("p",[s._v("应当尽量避免使用同步模式，它虽然看起来比较简单，但操作完成时它会阻塞页面渲染，在某些情况下甚至会冻结整个浏览器。你可能注意到网站乃至是应用出现这种情况，点击一个按钮，结果所有东西都用不了，当你还在想是不是崩溃了？结果一切又突然恢复正常了。")]),e("p",[s._v("某些 API 没有异步模式，如 “localStorage”， 使用这些API时，应当仔细做好性能监测，并随时准备切换到一个异步API，如果它造成了问题。")]),e("h2",{attrs:{id:"api-"}},[s._v("API 概述及比较")]),e("h3",{attrs:{id:"web-storage"}},[s._v("Web Storage")]),e("p",[e("a",{attrs:{href:"http://dev.w3.org/html5/webstorage/",target:"_blank"}},[s._v("Web Storage")]),s._v(" 是一个叫做 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("localStorage")]),s._v(" 的持久对象。可以使用 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v('localStorage.foo = "bar"')]),s._v(" 保存值，之后可以使用 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("localStorage.foo")]),s._v(" 获取到 —— 甚至是浏览器关闭之后重新打开。还可以使用一个叫做 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("sessionStorage")]),s._v(" 的对象，工作方式一样，只是当窗口关闭之后会被清除掉。")]),s._m(3),e("h6",{attrs:{id:"web-storage-"}},[s._v("Web Storage 的优点")]),s._m(4),e("h6",{attrs:{id:"web-storage-"}},[s._v("Web Storage 的弱点")]),s._m(5),e("h3",{attrs:{id:"web-sql-database"}},[s._v("Web SQL Database")]),s._m(6),e("h6",{attrs:{id:"web-sql-database-"}},[s._v("Web SQL Database 的优点")]),s._m(7),e("h6",{attrs:{id:"web-sql-database-"}},[s._v("Web SQL Database 的弱点")]),s._m(8),e("h3",{attrs:{id:"indexed-database-indexeddb-"}},[s._v("Indexed Database (IndexedDB)")]),s._m(9),e("p",[s._v("Indexed Database 是一个 “对象存储” （object stores） 的集合，可以直接把对象放进去。这个存储有点像 SQL 表，但在这种情况下，对象的结构没有约束，所以不需要预先定义什么。所以这和 Web Storage 有点像，拥有多个数据库、每个数据库又有多个存储（store）的特点。但不像 Web Storage那样， 还拥有重要的性能优势： 异步接口，可以在存储上创建索引，以提高搜索速度。")]),e("h6",{attrs:{id:"indexeddb-"}},[s._v("IndexedDB 的优点")]),s._m(10),e("h6",{attrs:{id:"indexeddb-"}},[s._v("IndexedDB 的弱点")]),s._m(11),e("h3",{attrs:{id:"filesystem"}},[s._v("FileSystem")]),s._m(12),e("h6",{attrs:{id:"filesystem-api-"}},[s._v("FileSystem（文件系统） API 的有点")]),s._m(13),e("h6",{attrs:{id:"filesystem-api-"}},[s._v("FileSystem API 的弱点")]),s._m(14),e("h2",{attrs:{id:"-"}},[s._v("来看代码")]),e("p",[s._v("本部分比较不同的 API 如何解决同一个问题。这个例子是一个 “地理情绪”（geo-mood） 签到系统，在那里你可以记录你在时间和地点的情绪。接口可让你在数据库类型之间切换。当然，在现实情况中，这可能显得有点作（contrived），数据库类型肯定比其他的更有意义，文件系统 API 根本不适用于这种应用！但为了演示的目的，如果我们能看到使用不同方式达到同样的结果，这还是有帮助的。还得注意，为了保值可读性，一些代码片段是经过重构的。")]),s._m(15),e("p",[s._v("为了让 Demo 更有意思，我们将数据存储单独拿出来，使用"),e("a",{attrs:{href:"http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming",target:"_blank"}},[s._v("标准的面向对象的设计技术（standard object-oriented design techniques）")]),s._v("。 UI 逻辑只知道有一个 store；它无需知道 store 是如何实现的，因为每个 store 的方法是一样的。因此 UI 层代码可以称为 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("store.setup()")]),s._v("，"),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("store.count()")]),s._v(" 等等。实际上，我们的 store 有四种实现，每种对应一种存储类型。应用启动的时候，检查 URL 并实例化对应的 store。")]),e("p",[s._v("为了保持 API 的一致性，所有的方法都是异步的，即它们将结果返回给调用方。Web Storage 的实现甚至也是这样的，其底层实现是本地的。")]),e("p",[s._v("在下面的演示中，我们将跳过 UI 和定位逻辑，聚焦于存储技术。")]),e("h3",{attrs:{id:"-store"}},[s._v("建立 Store")]),s._m(16),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20%20(!localStorage.checkins)%20localStorage.checkins%20%3D%20%3Cspan%20class%3D%22hljs-built_in%22%3EJSON%3C%2Fspan%3E.stringify(%5B%5D)%3B</code>')]),e("p",[s._v("对 "),e("strong",[s._v("Web SQL Database")]),s._v("，数据库结构如果不存在的话，我们需要先创建。幸运的是，如果数据库不存在，"),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("openDatabase")]),s._v(" 方法会自动创建数据库；同样，使用 SQL 句 “if not exists” 可以确保新的 checkins 表 如果已经存在的话不会被重写。我们需要预先定义好数据结构，也就是， checkins 表每列的名称和类型。每一行数据代表一次签到。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.db%20%3D%20openDatabase(%3Cspan%20class%3D%22hljs-string%22%3E'geomood'%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-string%22%3E'1.0'%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-string%22%3E'Geo-Mood%20Checkins'%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E8192%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.db.transaction(%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Etx%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20tx.executeSql(%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-string%22%3E%22create%20table%20if%20not%20exists%20%22%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%2B%20%3Cspan%20class%3D%22hljs-string%22%3E%22checkins(id%20integer%20primary%20key%20asc%2C%20time%20integer%2C%20latitude%20float%2C%22%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%2B%20%3Cspan%20class%3D%22hljs-string%22%3E%22longitude%20float%2C%20mood%20string)%22%3C%2Fspan%3E%2C%0A%20%20%20%20%20%20%20%20%20%5B%5D%2C%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3E%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%3Cspan%20class%3D%22hljs-string%22%3E%22siucc%22%3C%2Fspan%3E)%3B%20%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20)%3B%0A%7D)%3B</code>")]),e("p",[e("strong",[s._v("Indexed Database")]),s._v(" 启动需要一些工作，因为它需要启用一个数据库版本系统。当我们连接数据库的时候要明确我们需要那个版本，如果当前数据库使用的是之前的版本或者还尚未被创建，会触发 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("onupgradeneeded")]),s._v(" 事件，当升级完成后 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("onsuccess")]),s._v(" 事件会被触发。如果无需升级，"),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("onsuccess")]),s._v(" 事件马上就会触发。")]),e("p",[s._v("另外一件事就是创建 “mood” 索引，以便之后能很快地查询到匹配的情绪。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20db%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20version%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%3B%0A%3Cspan%20class%3D%22hljs-built_in%22%3Ewindow%3C%2Fspan%3E.indexedStore%20%3D%20%7B%7D%3B%0A%3Cspan%20class%3D%22hljs-built_in%22%3Ewindow%3C%2Fspan%3E.indexedStore.setup%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Ehandler%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20attempt%20to%20open%20the%20database%3C%2Fspan%3E%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20request%20%3D%20indexedDB.open(%3Cspan%20class%3D%22hljs-string%22%3E%22geomood%22%3C%2Fspan%3E%2C%20version)%3B%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20upgrade%2Fcreate%20the%20database%20if%20needed%3C%2Fspan%3E%0A%20%20%20%20request.onupgradeneeded%20%3D%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Eevent%3C%2Fspan%3E)%20%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20db%20%3D%20request.result%3B%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20%20(event.oldVersion%20%26lt%3B%20%20%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E)%20%20%7B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20Version%201%20is%20the%20first%20version%20of%20the%20database.%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20checkinsStore%20%3D%20db.createObjectStore(%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E%2C%20%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3EkeyPath%3C%2Fspan%3E%3A%20%20%3Cspan%20class%3D%22hljs-string%22%3E%22time%22%3C%2Fspan%3E%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20checkinsStore.createIndex(%3Cspan%20class%3D%22hljs-string%22%3E%22moodIndex%22%3C%2Fspan%3E%2C%20%20%3Cspan%20class%3D%22hljs-string%22%3E%22mood%22%3C%2Fspan%3E%2C%20%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3Eunique%3C%2Fspan%3E%3A%20%20%3Cspan%20class%3D%22hljs-literal%22%3Efalse%3C%2Fspan%3E%20%20%7D)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20%20(event.oldVersion%20%26lt%3B%20%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E)%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20In%20future%20versions%20we'd%20upgrade%20our%20database%20here.%20%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20This%20will%20never%20run%20here%2C%20because%20we're%20version%201.%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20db%20%3D%20request.result%3B%0A%20%20%20%20%7D%3B%0A%20%20%20%20request.onsuccess%20%3D%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Eev%3C%2Fspan%3E)%20%20%3C%2Fspan%3E%7B%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20assign%20the%20database%20for%20access%20outside%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20db%20%3D%20request.result%3B%20handler()%3B%0A%20%20%20%20%20%20%20%20db.onerror%20%3D%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Eev%3C%2Fspan%3E)%20%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%3Cspan%20class%3D%22hljs-string%22%3E%22db%20error%22%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-built_in%22%3Earguments%3C%2Fspan%3E)%3B%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%3B%0A%7D%3B</code>")]),s._m(17),e("p",[s._v("启动在整个文件系统中拿到一个控制手柄（handle），用来检查 “checkins/” 目录。如果目录不存在，使用 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("getDirectory")]),s._v(" 创建。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">setup%3A%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Ehandler%3C%2Fspan%3E)%20%20%3C%2Fspan%3E%7B%0A%20%20%20%20requestFileSystem(%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-built_in%22%3Ewindow%3C%2Fspan%3E.PERSISTENT%2C%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-number%22%3E1024%3C%2Fspan%3E*%3Cspan%20class%3D%22hljs-number%22%3E1024%3C%2Fspan%3E%2C%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Efs%3C%2Fspan%3E)%20%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20fs.root.getDirectory(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%7D%2C%20%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20no%20%22create%22%20option%2C%20so%20this%20is%20a%20read%20op%3C%2Fspan%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Edir%3C%2Fspan%3E)%20%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20checkinsDir%20%3D%20dir%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20handler()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3E%3C%2Fspan%3E)%20%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20fs.root.getDirectory(%20%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E%2C%20%20%7B%3Cspan%20class%3D%22hljs-attr%22%3Ecreate%3C%2Fspan%3E%3A%20%20%3Cspan%20class%3D%22hljs-literal%22%3Etrue%3C%2Fspan%3E%7D%2C%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Edir%3C%2Fspan%3E)%20%20%3C%2Fspan%3E%7B%20checkinsDir%20%3D%20dir%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20handler()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%20onError%20)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Ee%3C%2Fspan%3E)%20%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%3Cspan%20class%3D%22hljs-string%22%3E%22error%20%22%3C%2Fspan%3E%2Be.code%2B%3Cspan%20class%3D%22hljs-string%22%3E%22initialising%20-%20see%20http%3A%2F%2Fgoo.gl%2FYW0TI%22%3C%2Fspan%3E)%3B%0A%20%20%20%20%20%20%20%20%7D%20%20%0A%20%20%20%20)%3B%0A%7D</code>')]),e("h3",{attrs:{id:"-check-in-"}},[s._v("保存一次签到 （Check-in）")]),e("p",[s._v("使用 localStorage，我们只需要拿出 check-in 数组，在尾部添加一个，然后重新保存就行。我们还需要使用 JSON 对象的方法将其以字符串的方式存起来。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20checkins%20%3D%20%3Cspan%20class%3D%22hljs-built_in%22%3EJSON%3C%2Fspan%3E.parse(localStorage%5B%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E%5D)%3B%0Acheckins.push(checkin)%3B%0AlocalStorage%5B%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E%5D%20%3D%20%3Cspan%20class%3D%22hljs-built_in%22%3EJSON%3C%2Fspan%3E.stringify(checkins)%3B</code>')]),e("p",[s._v("使用 Web SQL Database，所有的事情都在 transaction 中进行。我们要在 checkins 表 创建新的一行，这是一个简单的 SQL 调用，我们使用 “?” 语法，而不是把所有的签到数据都放到 “insert” 命令中，这样更整洁，也更安全。真正的数据——我们要保存的四个值——被放到第二行。“?” 元素会被这些值（"),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("checkin.time")]),s._v("，"),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("checkin.latitude")]),s._v("等等）替换掉。接下来的两个参数是操作完成之后被调用的函数，分别在成功和失败后调用。在这个应用中，我们对所有操作使用相同的通用错误处理程序。这样，成功回调函数就是我们传给搜索函数的句柄——确保句柄在成功的时候被调用，以便操作完成之后 UI 能接到通知（比如，更新目前为止的签到数量）。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">store.db.transaction(%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Etx%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20tx.executeSql(%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-string%22%3E%22insert%20into%20checkins%20%22%3C%2Fspan%3E%20%2B%20%3Cspan%20class%3D%22hljs-string%22%3E%22(time%2C%20latitude%2C%20longitude%2C%20mood)%20values%20(%3F%2C%3F%2C%3F%2C%3F)%3B%22%3C%2Fspan%3E%2C%20%0A%20%20%20%20%20%20%20%20%5Bcheckin.time%2C%20checkin.latitude%2C%20checkin.longitude%2C%20checkin.mood%5D%2C%0A%20%20%20%20%20%20%20%20handler%2C%20%0A%20%20%20%20%20%20%20%20store.onError%0A%20%20%20%20)%3B%20%0A%7D)%3B</code>')]),e("p",[s._v("一旦存储建立起来，将其存储到 IndexedDB 中就像 Web Storage 差不多简单，还有异步工作的优点。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20transaction%20%3D%20db.transaction(%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E%2C%20%20%3Cspan%20class%3D%22hljs-string%22%3E'readwrite'%3C%2Fspan%3E)%3B%20%0Atransaction.objectStore(%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E).put(checkin)%3B%20%0Atransaction.oncomplete%20%3D%20handler%3B</code>")]),s._m(18),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">fs.root.getFile(%0A%20%20%20%20%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%2F%22%3C%2Fspan%3E%20%2B%20checkin.time%2C%0A%20%20%20%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3Ecreate%3C%2Fspan%3E%3A%20%3Cspan%20class%3D%22hljs-literal%22%3Etrue%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-attr%22%3Eexclusive%3C%2Fspan%3E%3A%20%3Cspan%20class%3D%22hljs-literal%22%3Etrue%3C%2Fspan%3E%20%7D%2C%20%0A%20%20%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Efile%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20file.createWriter(%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Ewriter%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20writer.onerror%20%3D%20fileStore.onError%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20bb%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20WebKitBlobBuilder%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20bb.append(%3Cspan%20class%3D%22hljs-built_in%22%3EJSON%3C%2Fspan%3E.stringify(checkin))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20writer.write(bb.getBlob(%3Cspan%20class%3D%22hljs-string%22%3E%22text%2Fplain%22%3C%2Fspan%3E))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20handler()%3B%20%7D%2C%20fileStore.onError)%3B%0A%20%20%20%20%7D%2C%0A%20%20%20%20fileStore.onError%0A)%3B</code>')]),e("h3",{attrs:{id:"-"}},[s._v("搜索匹配项")]),e("p",[s._v("接下来的函数找到所有匹配特定情绪的签到，例如，用户能看到他们在最近何时何地过得很开心。使用 localStorage， 我们必须手动遍历每次签到并将其与搜索的情绪对比，建立一个匹配列表。比较好的实践是返回存储数据的克隆，而不是实际的对象，因为搜索应该是一个只读的操作；所以我们将每个匹配的签到对象传递给通用的 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("clone()")]),s._v(" 方法进行操作。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20allCheckins%20%3D%20%3Cspan%20class%3D%22hljs-built_in%22%3EJSON%3C%2Fspan%3E.parse(localStorage%5B%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E%5D)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20matchingCheckins%20%3D%20%5B%5D%3B%0AallCheckins.forEach(%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Echeckin%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(checkin.mood%20%3D%3D%20moodQuery)%20%7B%0A%20%20%20%20%20%20%20%20matchingCheckins.push(clone(checkin))%3B%0A%20%20%20%20%7D%20%0A%7D)%3B%0Ahandler(matchingCheckins)%3B</code>')]),e("p",[s._v("使用  Web SQL Database，我们执行一次查询，只返回我们需要的行。但我们仍需要手动遍历来累计签到数据，因为数据库 API 返回的是数据库行，而不是一个数组。（对大的结果集来说这是好事，但就现在而言这增加了我们需要的工作！）")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20matchingCheckins%20%3D%20%5B%5D%3B%0Astore.db.transaction(%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Etx%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20tx.executeSql(%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-string%22%3E%22select%20*%20from%20checkins%20where%20mood%3D%3F%22%3C%2Fspan%3E%2C%0A%20%20%20%20%20%20%20%20%5BmoodQuery%5D%2C%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Etx%2C%20results%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Efor%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20i%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20i%20%26lt%3B%20results.rows.length%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20matchingCheckins.push(clone(results.rows.item(i)))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20handler(matchingCheckins)%3B%20%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20store.onError%0A%20%20%20%20)%3B%0A%7D)%3B</code>')]),e("p",[s._v("当然，在 IndexedDB 解决方案使用索引，我们先前在 “mood” 表中创建的索引，称为“moodindex”。我们用一个指针遍历每次签到以匹配查询。注意这个指针模式也可以用于整个存储；因此，使用索引就像我们在商店里的一个窗口前，只能看到匹配的对象（类似于在传统数据库中的“视图”）。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20store%20%3D%20db.transaction(%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-string%22%3E'readonly'%3C%2Fspan%3E).objectStore(%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20request%20%3D%20moodQuery%20%3F%20store.index(%3Cspan%20class%3D%22hljs-string%22%3E%22moodIndex%22%3C%2Fspan%3E).openCursor(%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20IDBKeyRange.only(moodQuery))%20%3A%20store.openCursor()%3B%0Arequest.onsuccess%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Eev%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20cursor%20%3D%20request.result%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(cursor)%20%7B%0A%20%20%20%20%20%20%20%20handler(cursor.value)%3B%0A%20%20%20%20%20%20%20%20cursor%5B%3Cspan%20class%3D%22hljs-string%22%3E%22continue%22%3C%2Fspan%3E%5D()%3B%0A%20%20%20%20%7D%20%0A%7D%3B</code>")]),e("p",[s._v("与许多传统的文件系统一样，FileSystem API 没有索引，所以搜索算法（如 Unix中的 “grep” 命令）必须遍历每个文件。我们从 “checkins/” 目录中拿到 "),e("a",{attrs:{href:"http://www.w3.org/TR/FileAPI/#dfn-filereader",target:"_blank"}},[s._v("Reader")]),s._v(" API ，通过 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("readentries()")]),s._v(" 。对于每个文件，再使用一个 reader，使用 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("readastext()")]),s._v(" 方法检查其内容。这些操作都是异步的，我们需要使用 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("readnext()")]),s._v(" 将调用连在一起。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">checkinsDir.createReader().readEntries(%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Efiles%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20reader%2C%20fileCount%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%2C%0A%20%20%20%20%20%20%20%20checkins%20%3D%20%5B%5D%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20readNextFile%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3E%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20reader%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20FileReader()%3B%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(fileCount%20%3D%3D%20files.length)%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%3B%0A%20%20%20%20%20%20%20%20reader.onload%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Ee%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20checkin%20%3D%20%3Cspan%20class%3D%22hljs-built_in%22%3EJSON%3C%2Fspan%3E.parse(%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E.result)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(moodQuery%20%3D%3D%20checkin.mood%20%7C%7C%20!moodQuery)%20handler(checkin)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20readNextFile()%3B%0A%20%20%20%20%20%20%20%20%7D%3B%0A%0A%20%20%20%20%20%20%20%20files%5BfileCount%2B%2B%5D.file(%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Efile%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20reader.readAsText(file)%3B%0A%20%20%20%20%20%20%20%20%7D)%3B%0A%20%20%20%20%7D%3B%0A%20%20%20%20readNextFile()%3B%0A%7D)%3B</code>')]),e("h3",{attrs:{id:"-"}},[s._v("匹配计数")]),e("p",[s._v("最后，我们需要给所有签到计数。")]),e("p",[s._v("对localStorage，我们简单的反序列化签到数组，读取其长度。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">handler(%3Cspan%20class%3D%22hljs-built_in%22%3EJSON%3C%2Fspan%3E.parse(localStorage%5B%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E%5D).length)%3B</code>')]),e("p",[s._v("对 Web SQL Database，可以检索数据库中的每一行（"),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("select * from checkins")]),s._v("），看结果集的长度。但如果我们知道我们在 SQL 中，有更容易和更快的方式 —— 我们可以执行一个特殊的 select 语句来检索计数。它将返回一行，其中一列包含计数。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">store.db.transaction(%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Etx%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20tx.executeSql(%3Cspan%20class%3D%22hljs-string%22%3E%22select%20count(*)%20from%20checkins%3B%22%3C%2Fspan%3E%2C%20%5B%5D%2C%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Etx%2C%20results%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20handler(results.rows.item(%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E)%5B%3Cspan%20class%3D%22hljs-string%22%3E%22count(*)%22%3C%2Fspan%3E%5D)%3B%0A%20%20%20%20%7D%2C%20store.onError)%3B%0A%7D)%3B</code>')]),e("p",[s._v("不幸的是， IndexedDB 不提供任何计算方法，所以我们只能自己遍历。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v("<code class=\"hljs lang-javascript\">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20count%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20request%20%3D%20db.transaction(%5B%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E%5D%2C%20%3Cspan%20class%3D%22hljs-string%22%3E'readonly'%3C%2Fspan%3E).objectStore(%3Cspan%20class%3D%22hljs-string%22%3E%22checkins%22%3C%2Fspan%3E).openCursor()%3B%0Arequest.onsuccess%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Eev%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20cursor%20%3D%20request.result%3B%0A%20%20%20%20cursor%20%3F%20%2B%2Bcount%20%26amp%3B%26amp%3B%20cursor%5B%3Cspan%20class%3D%22hljs-string%22%3E%22continue%22%3C%2Fspan%3E%5D()%20%3A%20handler(count)%3B%0A%7D%3B</code>")]),e("p",[s._v("对于文件系统， directory reader 的 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("readentries()")]),s._v(" 方法提供一个文件列表，所以我们返回该列表的长度就好。")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">checkinsDir.createReader().readEntries(%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Efiles%3C%2Fspan%3E)%20%20%3C%2Fspan%3E%7B%0A%20%20%20%20handler(files.length)%3B%0A%7D)%3B</code>')]),e("h2",{attrs:{id:"-"}},[s._v("总结")]),s._m(19)])]),s.post.prev.title||s.post.next.title?e("nav",{staticClass:"pagination"},[s.post.prev.title?e("nuxt-link",{staticClass:"prev",attrs:{to:"/post/"+s.post.prev.pathname,title:s.post.prev.title}},[s._v("« "+s._s(s.post.prev.title))]):s._e(),s.post.next.title?e("nuxt-link",{staticClass:"next",attrs:{to:"/post/"+s.post.next.pathname,title:s.post.next.title}},[s._v(s._s(s.post.next.title)+" »")]):s._e()],1):s._e(),e("gitalk",{attrs:{tags:s.tags}})],1)};t._withStripped=!0;var n={render:t,staticRenderFns:[function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("本文是关于客户端存储（client-side storage）的。这是一个通用术语，包含几个独立但相关的 API： Web Storage、Web SQL Database、Indexed Database 和 File Access。每种技术都提供了在用户硬盘上 —— 而非通常存储数据的服务器 —— 存储数据的独特方式。这么做主要基于以下两点理由：（a）使 web app 离线可用； （b）改善性能。对于客户端存储使用情况的详细阐述，请看 HTML5Rocks 上的文章 《"),a("a",{attrs:{href:"http://www.html5rocks.com/tutorials/offline/whats-offline/",target:"_blank"}},[this._v('"离线": 这是什么意思？我为何要关心?')]),this._v("》。")])},function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("p",[s._v("所有这四个存储 API 都将数据绑到一个单独的“源”（origin）上。例如，若 "),e("a",{attrs:{href:"http://abc.example.com",target:"_blank"}},[s._v("http://abc.example.com")]),s._v(" 保存了一些数据，那以后浏览器就只会允许 "),e("a",{attrs:{href:"http://abc.example.com",target:"_blank"}},[s._v("http://abc.example.com")]),s._v(" 获取这些数据。当我们谈论“源”（origin）的时候，这意味着域（domain）必须完全相同，所以 "),e("a",{attrs:{href:"http://example.com",target:"_blank"}},[s._v("http://example.com")]),s._v(" 和 "),e("a",{attrs:{href:"http://def.example.com",target:"_blank"}},[s._v("http://def.example.com")]),s._v(" 都不行。端口（port）也必须匹配，因此 "),e("a",{attrs:{href:"http://abc.example.com:123",target:"_blank"}},[s._v("http://abc.example.com:123")]),s._v(" 也是不能访问到 "),e("a",{attrs:{href:"http://abc.example.com",target:"_blank"}},[s._v("http://abc.example.com")]),s._v(" （端口默认为80）存储的数据。同样，协议也必须一样（像http vs https 等等）。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("你能想象，如果任何网站都被允许往毫不知情的硬盘里填充以千兆字节计的数据，该有多混乱。因此，浏览器对存储容量施加了限制。若你的应用试图超出限制，浏览器通常会显示一个对话框，让用户确认增加。您可能以为浏览器对单个源（origin）可使用的所有存储都加以同一单独的限制，但多数存储机制都是单独加以限制的。若 "),a("a",{attrs:{href:"http://www.w3.org/TR/quota-api/",target:"_blank"}},[this._v("Quota API")]),this._v(' 被采纳，这种情况可能会改变。但就现在来说，把浏览器当作一个二维矩阵，其维度分别是“源”（origin）和“存储”（storage）。例如， "'),a("a",{attrs:{href:"http://abc.example.com",target:"_blank"}},[this._v("http://abc.example.com")]),this._v('" 可能会允许最多存 5MB 的 Web Storage， 25MB 的 Web SQL 数据库，但因用户拒绝访问被禁止使用 Indexed DataBase。 Quota API 将问题放到一起来看，让您查询还有多少可用空间，有多少空间正在使用。')])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("Web Storage 是 "),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/NoSQL#Key-value_store",target:"_blank"}},[this._v("NoSQL 键值对储存（NoSQL key-value store）")]),this._v("的一种.")])},function(){var s=this.$createElement,a=this._self._c||s;return a("ol",[a("li",[this._v("数年以来，被所有现代浏览器支持， iOS 和 Android 系统下也支持（IE 从 IE8 开始支持 ）。")]),a("li",[this._v("简单的API签名。")]),a("li",[this._v("同步 API，调用简单。")]),a("li",[this._v("语义事件可保持其他标签和窗口同步。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ol",[a("li",[this._v("使用同步 API（这是得到最广泛支持的模式）存储大量的或者复杂的数据时性能差。")]),a("li",[this._v("缺少索引导致检索大量的或复杂的数据时性能差。（搜索操作需要手动遍历所有项。）")]),a("li",[this._v("存储或读取大量的或复杂的数据结构时性能差，因为需要手动序序列化成字符串或将字符串反序列化。主要的浏览器实现只支持字符串（尽管规范没这么说的）。")]),a("li",[this._v("需要保证数据的持续性和完整性，因为数据是有效非结构化（effectively unstructured）的。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("a",{attrs:{href:"http://www.w3.org/TR/webdatabase/",target:"_blank"}},[this._v("Web SQL Database")]),this._v(" 是一个结构化的数据库，具备典型 "),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Structured_Query_Language",target:"_blank"}},[this._v("SQL驱动的关系数据库（SQL-powered relational database）")]),this._v("的所有功能和复杂度。Indexed Database 在两者之间。"),a("a",{attrs:{href:"http://www.w3.org/TR/webdatabase/",target:"_blank"}},[this._v("Web SQL Database")]),this._v(" 有自由形式的密钥值对，有点像 Web Storage，但也有能力从这些值来索引字段，所以搜索速度要快得多。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("ol",[a("li",[this._v("被主要的移动浏览器（Android Browser, Mobile Safari, Opera Mobile）以及一些 PC 浏览器（Chrome, Safari, Opera） 支持。")]),a("li",[this._v("作为异步 API， 总体而言性能很好。数据库交互不会锁定用户界面。（同步API也可用于 WebWorkers。）")]),a("li",[this._v("良好的搜索性能，因为数据可以根据搜索键进行索引。")]),a("li",[this._v("强大，因为它支持"),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Database_transaction",target:"_blank"}},[this._v("事务性数据库模型（transactional database model）")]),this._v("。")]),a("li",[this._v("刚性的数据结构更容易保持数据的完整性。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ol",[a("li",[this._v("过时，不会被 IE 或 Firefox 支持，在某些阶段可能会被从其他浏览器淘汰。")]),a("li",[this._v("学习曲线陡峭，要求掌握关系数据库和SQL的知识。")]),a("li",[a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch",target:"_blank"}},[this._v("对象-关系阻抗失配（object-relational impedance mismatch）")]),this._v(".")]),a("li",[this._v("降低敏捷性，因为数据库模式必须预先定义，与表中的所有记录必须匹配相同的结构。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("到目前为止，我们已经看到，Web Storage 和 Web SQL Database 都有各种的优势和弱点。 "),a("a",{attrs:{href:"http://www.w3.org/TR/IndexedDB/",target:"_blank"}},[this._v("Indexed Database")]),this._v(" 产生于这两个早期 API 的经验，可以看作是一种结合两者优点而不招致其劣势得到尝试。")])},function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ol",[e("li",[s._v("作为异步API总体表现良好。数据库交互不会锁定用户界面。（同步 API 也可用于 WebWorkers。）")]),e("li",[s._v("良好的搜索性能，因为数据可以根据搜索键进行索引。")]),e("li",[s._v("支持版本控制。")]),e("li",[s._v("强大，因为它支持"),e("a",{attrs:{href:"http://en.wikipedia.org/wiki/Database_transaction",target:"_blank"}},[s._v("事务性数据库模型（transactional database model）")]),s._v("。")]),e("li",[s._v("因为数据模型简单，学习曲线也相当简单。")]),e("li",[s._v("良好的浏览器支持: Chrome, Firefox, mobile FF, IE10.")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ol",[a("li",[this._v("非常复杂的API，导致大量的嵌套回调。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("上面的 API 都是适用于文本和结构化数据，但涉及到大文件和二进制内容时，我们需要一些其他的东西。幸运的是，我们现在有了"),a("a",{attrs:{href:"http://dev.w3.org/2009/dap/file-system/file-dir-sys.html",target:"_blank"}},[this._v("文件系统 API 标准（FileSystem API standard）")]),this._v("。它给每个域一个完整的层次化的文件系统，至少在 Chrome 下面，这些都是用户的硬盘上的真正的文件。就单个文件的读写而言， API 建立在现有的 "),a("a",{attrs:{href:"http://www.w3.org/TR/FileAPI/",target:"_blank"}},[this._v("File API")]),this._v("之上。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("ol",[a("li",[this._v("可以存储大量的内容和二进制文件，很适合图像，音频，视频，PDF，等。")]),a("li",[this._v("作为异步 API， 性能良好。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ol",[a("li",[this._v("很早的标准，只有 Chrome 和 Opera 支持。")]),a("li",[this._v("没有事务（transaction）支持。")]),a("li",[this._v("没有内建的搜索/索引支持。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("a",{attrs:{href:"http://www.html5rocks.com/en/tutorials/offline/storage/demo.html",target:"_blank"}},[this._v("现在可以来试试我们的“地理情绪”（geo-mood）应用。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("对 "),a("strong",[this._v("localStorage")]),this._v("，我们做个简单的检验看存储是否存在。如果不存在，则新建一个数组，并将其存储在  localStorage 的 checkins（签到） 键下面。首先，我们使用 JSON 对象将结构序列化为字符串，因为大多数浏览器只支持字符串存储。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("最后，启动 "),a("strong",[this._v("FileSystem")]),this._v("。我们会把每种签到 JSON 编码后放在单独的文件中，它们都在 “checkins/” 目录下面。同样这并非 FileSystem API 最合适的用途，但对演示来说还挺好。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("使用 FileSystem API，新建文件并拿到相应的句柄，可以用 "),a("a",{attrs:{href:"http://www.w3.org/TR/file-writer-api/",target:"_blank"}},[this._v("FileWriter API")]),this._v(" 进行填充。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("本文从较高层次的角度，讲述了现代客户端存储技术。你也可以看看 "),a("a",{attrs:{href:"http://www.html5rocks.com/en/tutorials/offline/whats-offline",target:"_blank"}},[this._v("《离线应用概述》（overview on offline apps）")]),this._v("这篇文章。")])}]};a.a=n},"LFc/":function(s,a,e){"use strict";var t={title:"[译] 客户端存储",description:"客户端存储",keywords:"翻译,JavaScript,缓存,Client-Side Storage",pathname:"client-side-storage",translation:{author:"Michael Mahemoff",social:"http://twitter.com/mahemoff",from:"http://www.html5rocks.com/en/tutorials/offline/storage/"},create_time:"2016-06-25",prev:{title:"[译] Node.js 中的队列",pathname:"queues-in-node.js"},next:{title:"[译] No WebSockets Over HTTP2",pathname:"no-websockets-over-http2"}};a.a={head:function(){return{title:t.title,meta:[{name:"keywords",content:t.keywords||""},{name:"description",content:t.description}]}},data:function(){return{post:t,post_url:this.$config.site_url+"/post/"+t.pathname,tags:t.tags}},mounted:function(){this.$fixCode()}}},xEft:function(s,a,e){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var t=e("LFc/"),n=e("L8M9"),r=e("VU/8")(t.a,n.a,!1,null,null,null);r.options.__file="pages/post/client-side-storage.vue",a.default=r.exports}});
webpackJsonp([79],{NwLe:function(s,a,e){"use strict";var t=function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("div",{attrs:{id:"page-post"}},[e("article",{staticClass:"post detail"},[e("div",{staticClass:"meta"},[e("div",{staticClass:"date"},[s._v(s._s(s.post.create_time))])]),e("h1",{staticClass:"title"},[s._v(s._s(s.post.title))]),e("div",{staticClass:"entry-content"},[s.post.translation?e("blockquote",[e("p",{staticStyle:{"white-space":"nowrap",overflow:"hidden","text-overflow":"ellipsis"}},[s._v("\n        原文作者: "),e("a",{attrs:{href:s.post.translation.social,target:"_blank"}},[s._v(s._s(s.post.translation.author))]),e("br"),s._v("\n        原文地址: "),e("a",{attrs:{href:s.post.translation.from}},[s._v(s._s(s.post.translation.from))]),e("br"),s._v("\n        译文地址: "),e("a",{attrs:{href:s.post_url}},[s._v(s._s(s.post_url))]),e("br"),s._v("\n        本文由 "),e("a",{attrs:{href:this.$config.site_url}},[s._v(s._s(this.$config.site_owner))]),s._v(" 翻译，转载请保留此声明。"),e("br"),s._v("\n        著作权属于原作者，本译文仅用于学习、研究和交流目的，请勿用于商业目的。\n        ")])]):s._e(),s._m(0),e("p",[e("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t014315b7ee6ed04cb7.jpg",expression:"`https://p.ssl.qhimg.com/t014315b7ee6ed04cb7.jpg`"}],attrs:{alt:"beware of cliff"}})]),e("h3",{attrs:{id:"-"}},[s._v("读者须知")]),e("p",[s._v("本文写作于 2016 年 6 月 24 日。WebAssembly 是一项很新的、不稳定的技术；随着其标准化过程发展，本文中的任何内容都可能是错误的。")]),e("p",[s._v("不过先不管了....")]),e("h3",{attrs:{id:"webassembly-"}},[s._v("WebAssembly 是什么")]),e("p",[s._v("好吧，官网是这么描述的：")]),s._m(1),s._m(2),s._m(3),s._m(4),e("p",[s._v("听起来酷了很多，不是么？")]),e("h3",{attrs:{id:"-"}},[s._v("一起开始吧")]),e("p",[s._v("学习新东西的时候，我通常会找尽可能最简单的例子来看它是如何工作的。不幸的是，对 WebAssembly 来说，这不太现实。在当前阶段，wasm 仅仅只是字节码规范。想象回到 1996 年，假如太阳公司（Sun Microsystems）的一些工程师们带来了 JVM，但却...没有 Java....若果真如此，我想当时的对话可能是这样的：")]),e("p",[s._v("—— “伙计们，快来看看我们做的这个执行字节码的虚拟机！”\n—— “真棒！但我们给它怎么写代码？”")]),e("p",[e("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t01c5889a9cdf0ef479.png",expression:"`https://p.ssl.qhimg.com/t01c5889a9cdf0ef479.png`"}],attrs:{alt:"HelloWorld.class"}})]),s._m(5),e("p",[s._v("—— “嗯..这问题提得好。等会儿我查查看。”\n—— “真棒，如果遇到了任何问题，告诉我们你的想法，在我们的 github page 上贴出来。”\n—— “你说对啦。我们现在先去看看其他项目。”")]),e("p",[s._v("这个例子有些糟糕，因为 JVM 是基于 Java 语言的；尽管如此，希望你还是 get 到点了。如果都没有将代码编译为字节码的工具，要起步就很困难了。那我们要怎么开始？")]),e("h3",{attrs:{id:"webassembly-"}},[s._v("WebAssembly 之前有什么")]),s._m(6),e("p",[s._v("asm.js 仅仅是一个使用 javascript 语言特征的最小子集编写 javascript 的规范。你可以手写一些简单的 asm.js 代码，如果你想弄脏你的手，这正是极好的方式。（等会儿最好将这放在单独的文件中，通常约定文件名格式为 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("your-module-name.asm.js")]),s._v("。）)")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-title%22%3EMyMathModule%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Eglobal%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%3Cspan%20class%3D%22hljs-meta%22%3E%20%20%20%20%22use%20asm%22%3C%2Fspan%3E%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20exp%20%3D%20global.Math.exp%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-title%22%3EdoubleExp%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Evalue%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20value%20%3D%20%2Bvalue%3B%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%2B(%2Bexp(%2Bvalue)%20*%20%3Cspan%20class%3D%22hljs-number%22%3E2.0%3C%2Fspan%3E)%3B%0A%20%20%20%20%7D%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3EdoubleExp%3C%2Fspan%3E%3A%20doubleExp%20%7D%3B%0A%7D</code>')]),e("p",[s._v("这还不是一个特别有用的函数，但符合规范。如果你觉得这很二，别人也是这么觉得的，不过基本上每一个字符都是必须的。在这当中，一元运算符 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("+")]),s._v(" 的作用是类型注解，这样编译器会知道那些变量是 double 类型的，运行时就不必再次分辨它们是什么。它相当挑剔，如果你把什么地方弄得一团糟，火狐控制台会给你一些合理的错误信息。")]),e("p",[s._v("如果你想在浏览器中使用，像下面这样：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20myMath%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20MyMathModule(%3Cspan%20class%3D%22hljs-built_in%22%3Ewindow%3C%2Fspan%3E)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Efor%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20i%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20i%20%26lt%3B%20%3Cspan%20class%3D%22hljs-number%22%3E5%3C%2Fspan%3E%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(myMath.doubleExp(i))%3B%0A%7D</code>')]),e("p",[s._v("一切正常的话，结果大概像下图这样：")]),e("p",[e("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t01d27d8a53bcd3c767.png",expression:"`https://p.ssl.qhimg.com/t01d27d8a53bcd3c767.png`"}],attrs:{alt:"asm.js success"}})]),e("h3",{attrs:{id:"-webassembly"}},[s._v("开始尝试 WebAssembly")]),s._m(7),s._m(8),e("p",[e("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t01f65f188a46e3d538.png",expression:"`https://p.ssl.qhimg.com/t01f65f188a46e3d538.png`"}],attrs:{alt:"building binaryen"}})]),s._m(9),e("p",[s._v("对 WebAssembly 团队来说，发布可以工作的二进制文件意味着朝着正确的方向前进了一大步。")]),e("p",[s._v("构建成功之后，binaryen 目录下会有一个 bin 文件夹，其中有一些用来将 asm.js 转换为 wasm 的工具。第一个工具是 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("asm2wasm.exe")]),s._v("。它将 asm.js 代码转换为 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v(".s")]),s._v(" 格式的代码，这些代码是生成 wasm 所需的抽象语法树（AST）的文本表现形式。运行工具，最终会得到类似下面的东西：")]),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">(%3Cspan%20class%3D%22hljs-built_in%22%3Emodule%3C%2Fspan%3E%0A%20%20(memory%20%3Cspan%20class%3D%22hljs-number%22%3E256%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-number%22%3E256%3C%2Fspan%3E)%0A%20%20(%3Cspan%20class%3D%22hljs-keyword%22%3Eexport%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-string%22%3E%22memory%22%3C%2Fspan%3E%20memory)%0A%20%20(type%20%24FUNCSIG%24dd%20(func%20(param%20f64)%20(result%20f64)))%0A%20%20(%3Cspan%20class%3D%22hljs-keyword%22%3Eimport%3C%2Fspan%3E%20%24exp%20%3Cspan%20class%3D%22hljs-string%22%3E%22global.Math%22%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-string%22%3E%22exp%22%3C%2Fspan%3E%20(param%20f64)%20(result%20f64))%0A%20%20(%3Cspan%20class%3D%22hljs-keyword%22%3Eexport%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-string%22%3E%22doubleExp%22%3C%2Fspan%3E%20%24doubleExp)%0A%20%20(func%20%24doubleExp%20(param%20%24%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%20f64)%20(result%20f64)%0A%20%20%20%20(f64.mul%0A%20%20%20%20%20%20(call_import%20%24exp%0A%20%20%20%20%20%20%20%20(get_local%20%24%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E)%0A%20%20%20%20%20%20)%0A%20%20%20%20%20%20(f64.const%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E)%0A%20%20%20%20)%0A%20%20)%0A)</code>')]),e("p",[s._v("以后我们可以逐行分析上面的代码，但现在我只想让你看下它的样子。我还得提醒你一点，因为 wasm 是二进制格式的，所以像你今天对 javascript 所做的那样右击、查看源码是行不通的。从头到尾都是二进制码。目前的计划是查看 wasm 模块源码时对二进制格式进行反汇编，让人能读懂。")]),e("p",[s._v("接下来要做的是使用 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("wasm-as.exe")]),s._v(" 将 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v(".s")]),s._v(" 格式的代码转换为 wasm 二进制码。运行文件，最后就能得到浏览器需要的真正的 wasm 二进制码。")]),e("p",[e("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"http://cultureofdevelopment.com/img/binaryen-transform.png",expression:"`http://cultureofdevelopment.com/img/binaryen-transform.png`"}],attrs:{alt:"building wasm from asm.js"}})]),s._m(10),e("p",[e("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t01a5965c1d53b30e20.png",expression:"`https://p.ssl.qhimg.com/t01a5965c1d53b30e20.png`"}],attrs:{alt:"wasm bytecode"}})]),s._m(11),s._m(12),e("p",[s._v("如果你使用的是 Firefox，在地址栏中输入 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("about:config")]),s._v("，点击“确认我会保证小心”。然后在搜索框中输入 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("wasm")]),s._v("，双击 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("javascript.options.wasm")]),s._v(" 将值设置为 true，然后重启浏览器。")]),e("p",[s._v("如果你使用的是 Chrome Canary，打开 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("chrome://flags")]),s._v("，往下翻，找到 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Experimental WebAssembly")]),s._v("，点击“启用”链接，再重启浏览器。")]),e("p",[s._v("最后一步就是让模块在浏览器中跑起来。初次尝试时，这又是一大痛点，完全不知道怎么做。在规范中使用 wasm 模块的 API 一点都没找到。最后我在 Canary 的控制台上输入 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("WebAsse")]),s._v("，并没有任何提示。接着输入 "),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Was")]),s._v(" 的时候，提示出来了！控制台上打印出的对象大概最简陋的文档了，不过这时候我突然想到，可以用一些其他工具 (emscripten) 将代码编译为 wasm。不过这是另外一篇博客的话题了。")]),s._m(13),e("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">fetch(%3Cspan%20class%3D%22hljs-string%22%3E%22my-math-module.wasm%22%3C%2Fspan%3E)%0A%20%20%20%20.then(%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Eresponse%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20response.arrayBuffer()%3B%0A%20%20%20%20%7D)%0A%20%20%20%20.then(%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-params%22%3Ebuffer%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20dependencies%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-string%22%3E%22global%22%3C%2Fspan%3E%3A%20%7B%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-string%22%3E%22env%22%3C%2Fspan%3E%3A%20%7B%7D%0A%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20dependencies%5B%3Cspan%20class%3D%22hljs-string%22%3E%22global.Math%22%3C%2Fspan%3E%5D%20%3D%20%3Cspan%20class%3D%22hljs-built_in%22%3Ewindow%3C%2Fspan%3E.Math%3B%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20moduleBufferView%20%3D%20%3Cspan%20class%3D%22hljs-keyword%22%3Enew%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-built_in%22%3EUint8Array%3C%2Fspan%3E(buffer)%3B%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20myMathModule%20%3D%20Wasm.instantiateModule(moduleBufferView%2C%20dependencies)%3B%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(myMathModule.exports.doubleExp)%3B%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Efor%3C%2Fspan%3E(%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20i%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20i%20%26lt%3B%20%3Cspan%20class%3D%22hljs-number%22%3E5%3C%2Fspan%3E%3B%20i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(myMathModule.exports.doubleExp(i))%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%3B</code>')]),s._m(14),e("p",[e("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t01631e5f7d290aae84.png",expression:"`https://p.ssl.qhimg.com/t01631e5f7d290aae84.png`"}],attrs:{alt:"wasm in a browser"}})]),s._m(15),e("p",[s._v("我估计需要去提交一个 bug 报告了。记着，一切都是实验性的、不稳定的，所以当此类事情发生的时候，别灰心丧气。")]),e("p",[e("img",{directives:[{name:"lazy",rawName:"v-lazy",value:"https://p.ssl.qhimg.com/t017618b22a564ebf7f.png",expression:"`https://p.ssl.qhimg.com/t017618b22a564ebf7f.png`"}],attrs:{alt:"keep calm and file bug reports"}})]),e("h3",{attrs:{id:"-"}},[s._v("恭喜你")]),e("p",[s._v("你已经完成了第一个 WebAssembly 组件。接下来做些什么？目前我们碰到的还只是皮毛而已。在本例中手写 asm.js 很重要，但需要时间和耐心。使用 emscripten 将应用转换为 asm.js 要简单多了。关于这一点，我强烈建议你阅读 asm.js 规范，特别是内存模型的部分，因为其中的许多概念都被迁移到 WebAssembly 上了。另外一个怪异的事情是，目前还不能直接将数组作为函数参数。人们已经达成共识，这需要改变，但规范中尚未有关于这一点的。去看看指针逻辑吧。")]),e("p",[s._v("还有一点，在 wasm 中做一些工作的时候，你可能发展实际上 WebAssembly 还没普通的 javascript 运行得快。记住，现代的 javascript 引擎已经是高度优化的，wasm 要赶上这速度还需要时间。WebAssembly 还尚未进入准备生产的阶段。")]),s._m(16)])]),s.post.prev.title||s.post.next.title?e("nav",{staticClass:"pagination"},[s.post.prev.title?e("nuxt-link",{staticClass:"prev",attrs:{to:"/post/"+s.post.prev.pathname,title:s.post.prev.title}},[s._v("« "+s._s(s.post.prev.title))]):s._e(),s.post.next.title?e("nuxt-link",{staticClass:"next",attrs:{to:"/post/"+s.post.next.pathname,title:s.post.next.title}},[s._v(s._s(s.post.next.title)+" »")]):s._e()],1):s._e(),e("gitalk",{attrs:{tags:s.tags}})],1)};t._withStripped=!0;var n={render:t,staticRenderFns:[function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("头一次听说 "),a("a",{attrs:{href:"https://webassembly.github.io/",target:"_blank"}},[this._v("WebAssembly")]),this._v(" 的时候就觉得很酷，然后就超兴奋地开始尝试。但从一开始尝试的过程就不顺利，越来越让人灰心。本文的目的就是解决问题，让你免受困扰。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("blockquote",[a("p",[this._v("WebAssembly，或者称作 wasm，是一项适用于 Web 编译的可移植的、体积与加载高效的格式。（WebAssembly or wasm is a new portable, size- and load-time-efficient format suitable for compilation to the web.）")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("嗯...什么鬼？什么格式？文本（Text）？二进制（Binary）？老实说，这个描述真糟糕。所以不管它，收起那些 binggo 游戏卡（buzzword bingo cards，一种填词游戏，这些词通常都是流行语，阅读"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Buzzword_bingo",target:"_blank"}},[this._v("https://en.wikipedia.org/wiki/Buzzword_bingo")]),this._v("了解更多 —— 译者注），根据我所有的经验来描述吧：")])},function(){var s=this.$createElement,a=this._self._c||s;return a("blockquote",[a("p",[this._v("WebAssembly/wasm 是用来编写高性能的、浏览器无关的 Web 组件的一种字节码规范。（WebAssembly or wasm is a bytecode specification for writing performant, browser agnostic web components.）")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("有此妙语，听起来超棒，但仍然没 get 到点，接下来重点来了。WebAssembly 通过静态类型变量实现性能提升，运行时静态类型变量引用比动态类型变量更有效率。WebAssembly 由 "),a("a",{attrs:{href:"https://www.w3.org/community/webassembly/",target:"_blank"}},[this._v("W3C Community Group")]),this._v(" 制定，最终将被所有规范兼容的浏览器支持。还有杀手锏，"),a("em",[this._v("最终")]),this._v("我们可以使用"),a("em",[this._v("任何")]),this._v("语言编写这些 Web 组件（web components）。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("em",[this._v("图：字节码形式的 HelloWorld")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("多数技术都是创新的结果，特别是当合理的尝试成为正式规范时。wasm 也不例外，它实际上是 "),a("a",{attrs:{href:"http://asmjs.org/",target:"_blank"}},[this._v("asm.js")]),this._v(" 的工作的延续， asm.js 是一个编写 javascript 组件的的规范，可编译为静态类型。wasm 的规范拓展了这些创意，它接受任何语言编译而成的字节码，这些字节码作为二进制文件而非文本文件通过网络传输；规范由很多来自主流浏览器厂商的代表们一起制定，而非仅仅是 Mozilla。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("现在我们已经有了一个可以工作的 asm.js 代码片段，可以使用 "),a("a",{attrs:{href:"https://github.com/WebAssembly/binaryen",target:"_blank"}},[this._v("WebAssembly github page")]),this._v(" 提供的工具将其编译为 wasm。自己克隆代码仓库构建工具吧。这最麻烦了。这些工具一直在不断发展，代码会时不时挂掉，特别是在 Windows 环境下。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("不管你是用 Windows 还是 Mac，电脑上必须要安装 make 和 cmake 命令行工具。如果你在使用 Windows，你还需要安装 Visual Studio 2015。Mac 用户按照"),a("a",{attrs:{href:"https://github.com/WebAssembly/binaryen#building",target:"_blank"}},[this._v("这里的说明")]),this._v(" 操作；Windows 用户按照"),a("a",{attrs:{href:"https://github.com/brakmic/brakmic/blob/master/webassembly/COMPILING_WIN32.md",target:"_blank"}},[this._v("这个说明")]),this._v("操作。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("em",[this._v("图： Windows 下的工具构建")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("em",[this._v("图：将 asm.js 转换为 wasm 二进制码")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("em",[this._v("图：wasm 二进制码")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("紧接着，安装最新版的 "),a("a",{attrs:{href:"https://www.mozilla.org/en-US/firefox/new/",target:"_blank"}},[this._v("Firefox")]),this._v(" 或 "),a("a",{attrs:{href:"https://www.google.com/chrome/browser/canary.html",target:"_blank"}},[this._v("Chrome Canary")]),this._v("，并启用 WebAssembly。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("一段时间之后，鼠标落在了 WebAssembly 的设计文档仓库上。我看到了一个名为 "),a("a",{attrs:{href:"https://github.com/WebAssembly/design/blob/master/JS.md",target:"_blank"}},[this._v("JS.md")]),this._v(" 的文件，点击之后，有一个 API 的说明。仔细看顶部斜体的文字。但最精彩的部分还是最底部的代码片段，演示了如何最低限度地加载模块。我所需要做的就是拆出相关部分进行尝试。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("把代码放到 html 文件中，"),a("a",{attrs:{href:"https://www.npmjs.com/package/local-web-server",target:"_blank"}},[this._v("启动本地文件服务器")]),this._v("，在浏览器中加载页面。下面是在浏览器中的结果：")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("em",[this._v("浏览器中运行的 wasm （至少尝试运行了） ")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("如果你有任何关于 wasm 或者本文中提到的工具的问题，在 "),a("a",{attrs:{href:"http://stackoverflow.com",target:"_blank"}},[this._v("Stack Overflow")]),this._v(" 中提出来，记得标上恰当的 tag。")])}]};a.a=n},ogUs:function(s,a,e){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var t=e("ztJP"),n=e("NwLe"),i=e("VU/8")(t.a,n.a,!1,null,null,null);i.options.__file="pages/post/build-your-first-thing-with-web-assembly.vue",a.default=i.exports},ztJP:function(s,a,e){"use strict";var t={title:"[译] WebAssembly  初尝",description:"WebAssembly  初尝",keywords:"翻译,WebAssembly,JavaScript",pathname:"build-your-first-thing-with-web-assembly",translation:{author:"@Nick Larsen",social:"https://twitter.com/fody",from:"http://cultureofdevelopment.com/blog/build-your-first-thing-with-web-assembly"},create_time:"2016-08-16",prev:{title:"[译] 渐进式 Web App 的离线存储",pathname:"offline-storage-for-progressive-web-apps"},next:{title:"[译] 自动化、跨浏览器的 JavaScript 单元测试",pathname:"set-up-automated-cross-browser-javascript-unit-testing"}};a.a={head:function(){return{title:t.title,meta:[{name:"keywords",content:t.keywords||""},{name:"description",content:t.description}]}},data:function(){return{post:t,post_url:this.$config.site_url+"/post/"+t.pathname,tags:t.tags}},mounted:function(){this.$fixCode()}}}});
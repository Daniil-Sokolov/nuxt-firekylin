webpackJsonp([92],{"73uT":function(s,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var n=t("h+C/"),e=t("nXLg"),l=t("VU/8")(n.a,e.a,!1,null,null,null);l.options.__file="pages/post/JavaScript-and-Functional-Programming.vue",a.default=l.exports},"h+C/":function(s,a,t){"use strict";var n={title:"[译] JavaScript  与函数式编程",description:"JavaScript  与函数式编程",keywords:"翻译,函数式编程,JavaScript",pathname:"JavaScript-and-Functional-Programming",translation:{author:"Beth Allchurch",social:"https://www.twitter.com/BethAllchurch",from:"https://bethallchurch.github.io/JavaScript-and-Functional-Programming/"},create_time:"2016-08-10",prev:{title:"[译] 自动化、跨浏览器的 JavaScript 单元测试",pathname:"set-up-automated-cross-browser-javascript-unit-testing"},next:{title:"[译] eBay：style & speed",pathname:"browse-ebay-with-style-and-speed-ebay"}};a.a={head:function(){return{title:n.title,meta:[{name:"keywords",content:n.keywords||""},{name:"description",content:n.description}]}},data:function(){return{post:n,post_url:this.$config.site_url+"/post/"+n.pathname,tags:n.tags}},mounted:function(){this.$fixCode()}}},nXLg:function(s,a,t){"use strict";var n=function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("div",{attrs:{id:"page-post"}},[t("article",{staticClass:"post detail"},[t("div",{staticClass:"meta"},[t("div",{staticClass:"date"},[s._v(s._s(s.post.create_time))])]),t("h1",{staticClass:"title"},[s._v(s._s(s.post.title))]),t("div",{staticClass:"entry-content"},[s.post.translation?t("blockquote",[t("p",{staticStyle:{"white-space":"nowrap",overflow:"hidden","text-overflow":"ellipsis"}},[s._v("\n        原文作者: "),t("a",{attrs:{href:s.post.translation.social,target:"_blank"}},[s._v(s._s(s.post.translation.author))]),t("br"),s._v("\n        原文地址: "),t("a",{attrs:{href:s.post.translation.from}},[s._v(s._s(s.post.translation.from))]),t("br"),s._v("\n        译文地址: "),t("a",{attrs:{href:s.post_url}},[s._v(s._s(s.post_url))]),t("br"),s._v("\n        本文由 "),t("a",{attrs:{href:this.$config.site_url}},[s._v(s._s(this.$config.site_owner))]),s._v(" 翻译，转载请保留此声明。"),t("br"),s._v("\n        著作权属于原作者，本译文仅用于学习、研究和交流目的，请勿用于商业目的。\n        ")])]):s._e(),s._m(0),s._m(1),s._m(2),t("p",[s._v("尽管面向对象编程与函数式编程之间有些矛盾，它们却并非互斥的关系。JavaScript 所拥有的工具，能支持这两种方式。甚至可以说，就算不把它孤立地当作函数式语言使用，还是有不少来自函数式方法的概念和最佳实践可以帮助我们，让代码更干净，可读性更强，推理起来更简单。")]),t("h2",{attrs:{id:"-"}},[s._v("副作用最小化")]),s._m(3),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E6%9C%89%E5%89%AF%E4%BD%9C%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-keyword%22%3Evar%3C%2Fspan%3E%20x%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E10%3C%2Fspan%3E%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20myFunc%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20x%20%3D%20x%20%2B%20y%3B%0A%7D%3B%0A%0AmyFunc(%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%20)%3B%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%20x%20)%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%2013%3C%2Fspan%3E%0A%0AmyFunc(%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%20)%3B%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%20x%20)%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%2016%3C%2Fspan%3E</code>')]),t("p",[s._v("副作用并非天生邪恶。不产生任何副作用的程序也无法影响世界，因此也没有任何意义（除非是作为理论兴趣进行研究）。不过，副作用确实是危险的，应当尽量避免使用，除非绝对必要。")]),t("p",[s._v("当函数产生副作用的时候，仅凭借输入输出的内容，不足以明确函数究竟做了什么工作。必须了解上下文环境、程序状态的历史，这让函数更难理解。在不可预测的交互方式下，副作用可能带来一些 bug，且函数因上述依赖，测试起来也更困难。")]),t("p",[s._v("副作用最小化是函数式编程中最基础的原则，接下来的多数小节都可以当作是避免副作用的一些办法概要。")]),t("h2",{attrs:{id:"-immutable-"}},[s._v("视数据为不可变（Immutable）")]),t("p",[s._v("变动（mutation）指的是值在原位置上的变化（an in-place change to a value）。不可变值意味着，一旦创建出来，永远都不会变化。在 JavaScript 中，简单值如数字、字符串、布尔值这些是不可变的。不过，像对象、数组这样的数据结构都是可变的。")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20push%20%E6%96%B9%E6%B3%95%E6%94%B9%E5%8F%98%E4%BA%86%E6%95%B0%E7%BB%84%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20x%20%3D%20%5B%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%5D%3B%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%20x%20)%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%5B1%2C%202%5D%3C%2Fspan%3E%0A%0Ax.push(%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%20)%3B%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%20x%20)%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%5B1%2C%202%2C%203%5D%3C%2Fspan%3E</code>')]),t("p",[s._v("为什么要避免变动数据呢？")]),t("p",[s._v("变动是一种副作用。程序中变化的东西越少，需要跟踪记录的也就越少，程序也就越简单。")]),t("p",[s._v("JavaScript 中维持对象、数组等数据结构不可变性的可用工具很有限。通过 "),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Object.freeze")]),s._v(" 可以强制实现对象的不可变，但作用深度只有一层：")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20frozenObject%20%3D%20%3Cspan%20class%3D%22hljs-built_in%22%3EObject%3C%2Fspan%3E.freeze(%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3EvalueOne%3C%2Fspan%3E%20%3A%20%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-attr%22%3EvalueTwo%3C%2Fspan%3E%20%3A%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3EnestedValue%3C%2Fspan%3E%20%3A%20%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%20%7D%20%7D%20)%3B%0AfrozenObject.valueOne%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E4%B8%8D%E5%85%81%E8%AE%B8%3C%2Fspan%3E%0AfrozenObject.valueTwo.nestedValue%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E7%AB%9F%E7%84%B6%E5%85%81%E8%AE%B8%E4%BA%86!%3C%2Fspan%3E</code>')]),s._m(4),t("p",[s._v("对多数应用来说，使用工具库来保证不可变性有些矫枉过正。很多情况下，简单地将数据当作是不可变的，就能让我们受益良多。")]),t("h3",{attrs:{id:"-"}},[s._v("避免变动：数组")]),s._m(5),t("p",[s._v("举例来说，"),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("concat")]),s._v(" 方法可以用来替代 "),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("push")]),s._v(" 方法。"),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("push")]),s._v(" 改变了原数组；"),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("concat")]),s._v(" 返回由原数组和作为参数的数组组成的新数组，而原来的数组还是完整的。")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20push%20%E6%94%B9%E5%8F%98%E4%BA%86%E6%95%B0%E7%BB%84%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20arrayOne%20%3D%20%5B%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%5D%3B%0AarrayOne.push(%20%3Cspan%20class%3D%22hljs-number%22%3E4%3C%2Fspan%3E%20)%3B%0A%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%20arrayOne%20)%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%5B1%2C%202%2C%203%2C%204%5D%3C%2Fspan%3E%0A%0A%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20concat%20%E7%94%9F%E6%88%90%E4%BA%86%E6%96%B0%E6%95%B0%E7%BB%84%EF%BC%8C%E5%8E%9F%E6%95%B0%E7%BB%84%E4%BF%9D%E6%8C%81%E4%B8%8D%E5%8F%98%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20arrayTwo%20%3D%20%5B%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%5D%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20arrayThree%20%3D%20arrayTwo.concat(%5B%20%3Cspan%20class%3D%22hljs-number%22%3E4%3C%2Fspan%3E%20%5D)%3B%0A%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%20arrayTwo%20)%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%5B1%2C%202%2C%203%5D%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%20arrayThree%20)%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%5B1%2C%202%2C%203%2C%204%5D%3C%2Fspan%3E</code>')]),t("p",[s._v("还有一些非变动方法，包括 "),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank"}},[t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("map")])]),s._v("、"),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",target:"_blank"}},[t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("filter")])]),s._v("、"),t("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",target:"_blank"}},[t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("reduce")])]),s._v(" 等。")]),t("h3",{attrs:{id:"-"}},[s._v("避免变动：对象")]),t("p",[s._v("可以使用 "),t("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",target:"_blank"}},[t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Object.assign")])]),s._v(" 方法，而非直接编辑对象。该方法将源对象的属性复制到目标对象中，并将目标对象返回。如果总是用一个空对象作为目标对象，就能通过 "),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("Object.assign")]),s._v(" 避免直接编辑对象。")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20objectOne%20%3D%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3EvalueOne%3C%2Fspan%3E%20%3A%20%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%20%7D%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20objectTwo%20%3D%20%7B%20%3Cspan%20class%3D%22hljs-attr%22%3EvalueTwo%3C%2Fspan%3E%20%3A%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%20%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20objectThree%20%3D%20%3Cspan%20class%3D%22hljs-built_in%22%3EObject%3C%2Fspan%3E.assign(%20%7B%7D%2C%20objectOne%2C%20objectTwo%20)%3B%0A%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%20objectThree%20)%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%7B%20valueOne%20%3A%201%2C%20valueTwo%20%3A%202%20%7D%3C%2Fspan%3E</code>')]),t("h3",{attrs:{id:"-const-"}},[s._v("关于 "),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("const")])]),t("p",[t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("const")]),s._v(" 很有用，却不会使数据不可变。它只能防止变量被重新赋值。这不能混为一谈。")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20x%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%3B%0Ax%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E4%B8%8D%E5%85%81%E8%AE%B8%3C%2Fspan%3E%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20myArray%20%3D%20%5B%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%5D%3B%0AmyArray%20%3D%20%5B%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%5D%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E4%B8%8D%E5%85%81%E8%AE%B8%3C%2Fspan%3E%0A%0AmyArray%5B%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%5D%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E5%85%81%E8%AE%B8%E4%BA%86!%3C%2Fspan%3E</code>')]),t("h2",{attrs:{id:"-"}},[s._v("书写纯函数")]),s._m(6),t("p",[s._v("纯函数是最小化副作用的重要工具。另外，与上下文无关的特点，也让它们有了高可测试性和可复用性。")]),t("p",[s._v("前面讲副作用的小节中的代码里， "),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("myFunc")]),s._v(" 函数就是非纯函数，注意两次调用时输入相同但每次返回结果却不同。不过，它也能改写成纯函数：")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E5%B0%86%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%8F%98%E4%B8%BA%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20myFunc%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20x%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E10%3C%2Fspan%3E%3B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20x%20%2B%20y%3B%0A%7D%0A%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(myFunc(%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%20))%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%2013%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(myFunc(%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%20))%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%2013%3C%2Fspan%3E</code>')]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E5%B0%86%20x%20%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20x%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E10%3C%2Fspan%3E%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20myFunc%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%2C%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20x%20%2B%20y%3B%0A%7D%0A%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(myFunc(%20x%2C%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%20))%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%2013%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(myFunc(%20x%2C%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%20))%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%2013%3C%2Fspan%3E</code>')]),t("p",[s._v("你的程序最终肯定还是会产生一些副作用。当副作用产生的时候，小心应对，尽可能地约束、限制它们的影响。")]),t("h2",{attrs:{id:"-function-generating-functions-"}},[s._v("书写返回函数的函数（Function-Generating Functions）")]),t("p",[s._v("找一些程经验的人，让他们猜猜下面的代码做了什么：")]),t("p",[s._v("例 1")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20numbers%20%3D%20%5B%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%5D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Efor%3C%2Fspan%3E%20(%20%3Cspan%20class%3D%22hljs-keyword%22%3Elet%3C%2Fspan%3E%20i%20%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%3B%20i%20%26lt%3B%20numbers.length%3B%20i%2B%2B%20)%20%7B%0A%20%20%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%20numbers%5Bi%5D%20)%3B%0A%7D</code>')]),t("p",[s._v("例 2")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20numbers%20%3D%20%5B%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%5D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20print%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20input%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(%20input%20)%3B%0A%7D%3B%0A%0Anumbers.forEach(%20print%20)%3B</code>')]),t("p",[s._v("我测试过的所有人在例 2 上运气更好。例 1 展示的是"),t("em",[s._v("命令式")]),s._v("方法，将一列数字打印出来。例 2 展示的是"),t("em",[s._v("声明式")]),s._v("方法。将循环遍历数组、在控制台打印数字这些细节各种包装成 "),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("forEach")]),s._v(" 和 "),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("print")]),s._v(" 函数，无需知道"),t("em",[s._v("如何做")]),s._v("，就可以表达我们需要程序"),t("em",[s._v("做什么")]),s._v("。这让代码可读性更高。例 2 的最后一行看起来，很接近英语句子。")]),s._m(7),s._m(8),t("p",[s._v("这些特性组合在一起，我们就可以编写返回函数的函数了。返回的函数能“记住”传给生成函数的参数，并在程序的其他地方使用这些参数。")]),t("h3",{attrs:{id:"-"}},[s._v("函数组合")]),s._m(9),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E9%80%9A%E8%BF%87%20add%20%E5%92%8C%20square%20%E5%87%BD%E6%95%B0%E7%BB%84%E5%90%88%E7%94%9F%E6%88%90%20addThenSquare%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20add%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%2C%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20x%20%2B%20y%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20square%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20x%20*%20x%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20addThenSquare%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%2C%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20square(add(%20x%2C%20y%20))%3B%0A%7D%3B</code>')]),t("p",[s._v("你可能会发现一直在重复这种利用更小的函数生成一个更复杂的函数的形式。通常编写一个组合函数会更有效率：")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20add%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%2C%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20x%20%2B%20y%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20square%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20x%20*%20x%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20composeTwo%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20f%2C%20g%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%2C%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20g(%20f%20(%20x%2C%20y%20)%20)%3B%0A%20%20%7D%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20addThenSquare%20%3D%20composeTwo(%20add%2C%20square%20)%3B</code>')]),t("p",[s._v("还可以走得更远，编写一个更一般化的组合函数：")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E8%BF%99%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%20composeTwo%20%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%87%BD%E6%95%B0%E5%8F%AF%E4%BB%A5%E6%8E%A5%E6%94%B6%E4%BB%BB%E6%84%8F%E6%95%B0%E9%87%8F%E7%9A%84%E5%8F%82%E6%95%B0%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20composeTwo%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20f%2C%20g%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20...args%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20g(%20f(%20...args%20)%20)%3B%0A%20%20%7D%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20composeMany%20%E5%8F%AF%E4%BB%A5%E6%8E%A5%E6%94%B6%E4%BB%BB%E6%84%8F%E6%95%B0%E9%87%8F%E7%9A%84%E5%87%BD%E6%95%B0%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E5%87%BD%E6%95%B0%E8%83%BD%E6%8E%A5%E6%94%B6%E4%BB%BB%E6%84%8F%E6%95%B0%E9%87%8F%E7%9A%84%E5%8F%82%E6%95%B0%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20composeMany%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20...args%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20funcs%20%3D%20args%3B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20...args%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20funcs.forEach(%3Cspan%20class%3D%22hljs-function%22%3E(%3Cspan%20class%3D%22hljs-params%22%3E%20func%20%3C%2Fspan%3E)%20%3D%26gt%3B%3C%2Fspan%3E%20%7B%0A%20%20%20%20%20%20args%20%3D%20%5Bfunc.apply(%20%3Cspan%20class%3D%22hljs-keyword%22%3Ethis%3C%2Fspan%3E%2C%20args%20)%5D%3B%20%0A%20%20%20%20%7D)%3B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20args%5B%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%5D%3B%0A%20%20%7D%3B%0A%7D%3B</code>')]),t("p",[s._v("组合函数的最终形式取决于你所需的通用性水平，以及偏好的 API 类型。")]),t("h3",{attrs:{id:"-partial-application-"}},[s._v("偏函数（Partial Application）")]),s._m(10),t("p",[s._v("在下面的例子中，"),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("double")]),s._v("、"),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("triple")]),s._v(" 和 "),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("quadruple")]),s._v(" 都是 "),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"codespan",attrs:{width:"0",height:"0"}},[s._v("multiply")]),s._v(" 函数的 partial 应用。")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20multiply%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%2C%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20x%20*%20y%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20partApply%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20fn%2C%20x%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20fn(%20x%2C%20y%20)%3B%0A%20%20%7D%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20double%20%3D%20partApply(%20multiply%2C%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%20)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20triple%20%3D%20partApply(%20multiply%2C%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%20)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20quadruple%20%3D%20partApply(%20multiply%2C%20%3Cspan%20class%3D%22hljs-number%22%3E4%3C%2Fspan%3E%20)%3B</code>')]),t("h3",{attrs:{id:"-"}},[s._v("柯里化")]),s._m(11),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20multiply%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%2C%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20x%20*%20y%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20curry%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20fn%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20fn(%20x%2C%20y%20)%3B%0A%20%20%20%20%7D%3B%0A%20%20%7D%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20curriedMultiply%20%3D%20curry(%20multiply%20)%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20double%20%3D%20curriedMultiply(%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%20)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20triple%20%3D%20curriedMultiply(%20%3Cspan%20class%3D%22hljs-number%22%3E3%3C%2Fspan%3E%20)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20quadruple%20%3D%20curriedMultiply(%20%3Cspan%20class%3D%22hljs-number%22%3E4%3C%2Fspan%3E%20)%3B%0A%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(triple(%20%3Cspan%20class%3D%22hljs-number%22%3E6%3C%2Fspan%3E%20))%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%2018%3C%2Fspan%3E</code>')]),t("p",[s._v("柯里化和 partial 应用在概念上很相似（可能不会两个都需要使用），但仍然有所不同。主要区别在于，柯里化总是生成函数套链，每次只接收一个参数，而 partial 应用返回的函数可以一次接收多个参数。 比较它们作用于最少接收三个参数的函数时，这种差别就更明晰了：")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20multiply%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%2C%20y%2C%20z%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20x%20*%20y%20*%20z%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20curry%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20fn%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20x%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20y%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20z%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20fn(%20x%2C%20y%2C%20z%20)%3B%0A%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%7D%3B%0A%20%20%7D%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20partApply%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20fn%2C%20x%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20y%2C%20z%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20fn(%20x%2C%20y%2C%20z%20)%3B%0A%20%20%7D%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20curriedMultiply%20%3D%20curry(%20multiply%20)%3B%0A%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20partiallyAppliedMultiply%20%3D%20partApply(%20multiply%2C%20%3Cspan%20class%3D%22hljs-number%22%3E10%3C%2Fspan%3E%20)%3B%0A%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(curriedMultiply(%20%3Cspan%20class%3D%22hljs-number%22%3E10%3C%2Fspan%3E%20)(%20%3Cspan%20class%3D%22hljs-number%22%3E5%3C%2Fspan%3E%20)(%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%20))%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20100%3C%2Fspan%3E%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(partiallyAppliedMultiply(%20%3Cspan%20class%3D%22hljs-number%22%3E5%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E2%3C%2Fspan%3E%20))%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%20100%3C%2Fspan%3E</code>')]),t("h2",{attrs:{id:"-"}},[s._v("递归")]),s._m(12),t("p",[s._v("下面是计算递归计算阶乘的例子：")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20factorial%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20n%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(%20n%20%3D%3D%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%20)%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%3B%0A%20%20%7D%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20n%20*%20factorial(%20n%20-%20%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%20)%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(factorial(%20%3Cspan%20class%3D%22hljs-number%22%3E10%3C%2Fspan%3E%20))%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%203628800%3C%2Fspan%3E</code>')]),t("p",[s._v("在 JavaScript 中使用递归函数需要细心一些。每次函数调用都会向调用栈（call stack）中加入新的调用帧（call frame），当函数返回的时候，该调用帧从调用栈中弹出。递归函数调用在返回之前调用自身，所以很容易就会超出调用栈的限制，导致程序崩溃。")]),s._m(13),t("h3",{attrs:{id:"-"}},[s._v("尾调用优化")]),t("p",[s._v("尾调用指的是，某个函数的最后一步动作是调用函数。尾调用优化指的是，当语言编译器识别到尾调用的时候，会对其复用相同的调用帧。这意味着，在编写尾调用的递归函数时，调用帧的限制永远不会被超出，因为调用帧会被反复使用。")]),t("p",[s._v("下面是将前面的递归函数采用尾递归优化重写之后的例子:")]),t("textarea",{directives:[{name:"show",rawName:"v-show",value:!1,expression:"false"}],staticClass:"pre-area",attrs:{width:"0",height:"0"}},[s._v('<code class="hljs lang-javascript">%3Cspan%20class%3D%22hljs-keyword%22%3Econst%3C%2Fspan%3E%20factorial%20%3D%20%3Cspan%20class%3D%22hljs-function%22%3E%3Cspan%20class%3D%22hljs-keyword%22%3Efunction%3C%2Fspan%3E%20(%3Cspan%20class%3D%22hljs-params%22%3E%20n%2C%20base%20%3C%2Fspan%3E)%20%3C%2Fspan%3E%7B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Eif%3C%2Fspan%3E%20(%20n%20%3D%3D%3D%20%3Cspan%20class%3D%22hljs-number%22%3E0%3C%2Fspan%3E%20)%20%7B%0A%20%20%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20base%3B%0A%20%20%7D%0A%20%20base%20*%3D%20n%3B%0A%20%20%3Cspan%20class%3D%22hljs-keyword%22%3Ereturn%3C%2Fspan%3E%20factorial(%20n%20-%20%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%2C%20base%20)%3B%0A%7D%3B%0A%0A%3Cspan%20class%3D%22hljs-built_in%22%3Econsole%3C%2Fspan%3E.log(factorial(%20%3Cspan%20class%3D%22hljs-number%22%3E10%3C%2Fspan%3E%2C%20%3Cspan%20class%3D%22hljs-number%22%3E1%3C%2Fspan%3E%20))%3B%20%3Cspan%20class%3D%22hljs-comment%22%3E%2F%2F%203628800%3C%2Fspan%3E</code>')]),s._m(14),t("h2",{attrs:{id:"-"}},[s._v("小结")]),t("p",[s._v("函数式编程容纳了许多思想，借助它们可以优化代码。纯函数和不可变数据将副作用的危害最小化，声明式编程让代码可读性大大提高。在与复杂性的斗争中，这些是我们应当拥抱的重要工具。")]),t("h2",{attrs:{id:"-"}},[s._v("资源")]),t("h3",{attrs:{id:"-"}},[s._v("概述性")]),s._m(15),t("h3",{attrs:{id:"-"}},[s._v("副作用")]),s._m(16),t("h3",{attrs:{id:"-"}},[s._v("不可变性")]),s._m(17),t("h3",{attrs:{id:"-"}},[s._v("纯函数")]),s._m(18),t("h3",{attrs:{id:"-"}},[s._v("函数生成")]),s._m(19),t("h3",{attrs:{id:"-"}},[s._v("递归")]),s._m(20)])]),s.post.prev.title||s.post.next.title?t("nav",{staticClass:"pagination"},[s.post.prev.title?t("nuxt-link",{staticClass:"prev",attrs:{to:"/post/"+s.post.prev.pathname,title:s.post.prev.title}},[s._v("« "+s._s(s.post.prev.title))]):s._e(),s.post.next.title?t("nuxt-link",{staticClass:"next",attrs:{to:"/post/"+s.post.next.pathname,title:s.post.next.title}},[s._v(s._s(s.post.next.title)+" »")]):s._e()],1):s._e(),t("gitalk",{attrs:{tags:s.tags}})],1)};n._withStripped=!0;var e={render:n,staticRenderFns:[function(){var s=this.$createElement,a=this._self._c||s;return a("blockquote",[a("p",[a("strong",[this._v("译者注：推荐一篇译文，"),a("a",{attrs:{href:"http://pinggod.com/2016/函数式编程术语解析",target:"_blank"}},[this._v("《函数式编程术语解析》")]),this._v("。")])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("em",[this._v("本文是我在 2016 年 7 月 29 号听 Kyle Simpson 精彩的课程"),a("strong",[this._v("《Functional-Light JavaScript》")]),this._v("时所做的笔记（外加个人的深入研究）（"),a("a",{attrs:{href:"https://speakerdeck.com/getify/functional-light-javascript",target:"_blank"}},[this._v("幻灯片在这")]),this._v("）。")])])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("长久以来，面向对象在 JavaScript 编程范式中占据着主导地位。不过，最近人们对函数式编程的兴趣正在增长。函数式编程是一种编程风格，它强调将程序状态变化（即"),a("em",[this._v("副作用[side effect]")]),this._v("）的次数减到最小。因此，函数式编程鼓励使用"),a("em",[this._v("不可变")]),this._v("数据（immutable data）和纯函数（pure functions）（“纯”意味着没有副作用的）。它也更倾向于使用"),a("em",[this._v("声明式")]),this._v("的风格，鼓励使用命名良好的函数，这样就能使用在我们视线之外的那些打包好的细节实现，通过描述希望发生什么以进行编码。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("所谓"),a("em",[this._v("副作用")]),this._v("，指的是函数内部产生了超出函数之外的变化。函数可能会做一些事，如操作 DOM、修改更高层作用域中的变量值，或者将数据写入数据库。这些带来的就是副作用。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("不过，还是有一些很棒的工具库解决了这些问题，其中最著名的要数 "),a("a",{attrs:{href:"https://facebook.github.io/immutable-js/",target:"_blank"}},[this._v("Immutable")]),this._v(" 了。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("JavaScript 数组方法可以被概括为"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Mutator_methods",target:"_blank"}},[this._v("变动方法 (mutator methods) ")]),this._v("和非变动方法。应当尽可能避免变动方法。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("em",[this._v("纯函数")]),this._v(" 不会改变程序的状态，也不会产生可感知的副作用。纯函数的输出，仅仅取决于输入值。无论何时何地被调用，只要输入值相同，返回值也就一样。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("采用这种方法，涉及到编写大量函数。利用现有函数编写生成新函数的函数，可以让这个过程中的重复（"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself",target:"_blank"}},[this._v("DRY")]),this._v("-er）更少。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("特别地，JavaScript 的两个特性让这种形式的函数生成变得可能。第一个是"),a("em",[this._v("闭包")]),this._v("。函数能够访问包含作用域中的变量，就算该作用域已不复存在，这就是闭包。第二个特性是，JavaScript 将函数当作值来对待。这使书写高阶函数成为可能，高阶函数可以接收函数作为参数，并/或返回函数。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("通过"),a("em",[this._v("函数组合")]),this._v("，可能将函数组合在一起形成新的函数。一起来看例子：")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("em",[this._v("Partial 函数应用")]),this._v(" 指定函数参数中的一个或多个，然后返回一个稍后会被完整调用的函数。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("em",[this._v("柯里化")]),this._v("是将接收多个参数的函数转换为一系列只接收一个参数的函数的过程。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("em",[this._v("递归")]),this._v("函数是这样一种函数，它会一直调用自身，直至满足基本条件。递归函数是高度声明式的。它们也很优雅，写起来很爽！")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[this._v("不过，这可以通过"),a("em",[this._v("尾调用优化")]),this._v("来避免。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("p",[a("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/6.0/#sec-tail-position-calls",target:"_blank"}},[this._v("ES2015 语言规范")]),this._v("中已包含了适当的尾部调用的支持，但目前在大部分环境中尚未得到支持。可以在"),a("a",{attrs:{href:"https://kangax.github.io/compat-table/es6/",target:"_blank"}},[this._v("这里")]),this._v("查看你能否使用。")])},function(){var s=this.$createElement,a=this._self._c||s;return a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://www.sitepoint.com/series/introduction-functional-javascript/",target:"_blank"}},[this._v("SitePoint: An Introduction to Functional JavaScript")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://www.cs.utexas.edu/~shmat/courses/cs345/whyfp.pdf",target:"_blank"}},[this._v("John Hughes: Why Functional Programming Matters")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://www.vasinov.com/blog/16-months-of-functional-programming/",target:"_blank"}},[this._v("Vasily Vasinov: 16 Months of Functional Programming")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://stephen-young.me.uk/2013/01/20/functional-programming-with-javascript.html",target:"_blank"}},[this._v("Stephen Young: Functional programming with Javascript")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-intro/",target:"_blank"}},[this._v("James Sinclair: A Gentle Introduction to Functional JavaScript")])])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Side_effect_(computer_science",target:"_blank"}},[this._v("Wikipedia: Side effect (computer science)")]),this._v(")")])]),a("li",[a("p",[a("a",{attrs:{href:"http://stackoverflow.com/questions/763835/are-side-effects-a-good-thing",target:"_blank"}},[this._v("Stack Overflow: Are side effects a good thing?")])])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://www.sitepoint.com/immutability-javascript/",target:"_blank"}},[this._v("Site Point: Immutability in JavaScript")])])]),a("li",[a("p",[a("a",{attrs:{href:"https://auth0.com/blog/2016/03/23/intro-to-immutable-js/",target:"_blank"}},[this._v("Auth0: Introduction to Immutable.js and Functional Programming Concepts")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://programmers.stackexchange.com/questions/151733/if-immutable-objects-are-good-why-do-people-keep-creating-mutable-objects",target:"_blank"}},[this._v("Stack Exchange: If immutable objects are good, why do people keep creating mutable objects?")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://stackoverflow.com/questions/34385243/why-is-immutability-so-importantor-needed-in-javascript",target:"_blank"}},[this._v("Stack Overflow: Why is immutability so important(or needed) in javascript?")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://www.youtube.com/watch?v=I7IdS-PbEgI&t=14m8s",target:"_blank"}},[this._v("React.js Conf 2015 - Immutable Data and React (video)")])])]),a("li",[a("p",[a("a",{attrs:{href:"https://egghead.io/lessons/javascript-redux-avoiding-array-mutations-with-concat-slice-and-spread",target:"_blank"}},[this._v("Redux: Avoiding Array Mutations with concat(), slice(), and …spread (video)")])])]),a("li",[a("p",[a("a",{attrs:{href:"https://egghead.io/lessons/javascript-redux-avoiding-object-mutations-with-object-assign-and-spread",target:"_blank"}},[this._v("Redux: Avoiding Object Mutations with Object.assign() and …spread (video)")])])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ul",[a("li",[a("a",{attrs:{href:"https://egghead.io/lessons/javascript-redux-pure-and-impure-functions",target:"_blank"}},[this._v("Redux: Pure and Impure Functions")])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ul",[a("li",[a("p",[a("a",{attrs:{href:"http://eloquentjavascript.net/05_higher_order.html",target:"_blank"}},[this._v("Eloquent JavaScript: Higher-Order Functions")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://scott.sauyet.com/Javascript/Talk/Compose/2013-05-22/#slide-0",target:"_blank"}},[this._v("Scott Sauyet: Compose Yourself: Fun with Functions")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://www.vasinov.com/blog/on-currying-and-partial-function-application/",target:"_blank"}},[this._v("Vasily Vasinov: On Currying and Partial Function Application")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://www.2ality.com/2011/09/currying-vs-part-eval.html",target:"_blank"}},[this._v("2ality: Currying versus partial application")])])])])},function(){var s=this.$createElement,a=this._self._c||s;return a("ul",[a("li",[a("p",[a("a",{attrs:{href:"http://stackoverflow.com/questions/3021/what-is-recursion-and-when-should-i-use-it",target:"_blank"}},[this._v("Stack Overflow: What is recursion and when should I use it?")])])]),a("li",[a("p",[a("a",{attrs:{href:"https://medium.com/functional-javascript/recursion-282a6abbf3c5#.i913o81g3",target:"_blank"}},[this._v("Medium: Recursion")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://benignbemine.github.io/2015/07/19/es6-tail-calls/",target:"_blank"}},[this._v("Kyle Owen: ES6 Tail Call Optimization Explained")])])]),a("li",[a("p",[a("a",{attrs:{href:"https://taylodl.wordpress.com/2013/06/07/functional-javascript-tail-call-optimization-and-trampolines/",target:"_blank"}},[this._v("Don Taylor: Functional JavaScript – Tail Call Optimization and Trampolines")])])]),a("li",[a("p",[a("a",{attrs:{href:"http://www.integralist.co.uk/posts/js-recursion.html",target:"_blank"}},[this._v("Mark McDonnell: Understanding recursion in functional JavaScript programming")])])])])}]};a.a=e}});